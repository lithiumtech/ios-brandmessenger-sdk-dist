// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RichMessageKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import RichMessageKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KBMTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with _: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct MessageBubbleStyle {
  public var color: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat
  public var padding: RichMessageKit.Padding
  public init(color: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, padding: RichMessageKit.Padding)
}
public struct MessageStyle {
  public var displayName: RichMessageKit.Style
  public var message: RichMessageKit.Style
  public var time: RichMessageKit.Style
  public var bubble: RichMessageKit.MessageBubbleStyle
  public var cellMargin: RichMessageKit.MessageCellMargin
  public init()
}
public struct MessageCellMargin {
  public var left: CoreFoundation.CGFloat
  public var right: CoreFoundation.CGFloat
  public init()
  public init(left: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat)
}
public enum MessageTheme {
  public static var sentMessage: RichMessageKit.MessageStyle
  public static var receivedMessage: RichMessageKit.MessageStyle
  public static var messageStatus: RichMessageKit.MessageTheme.SentMessageStatus
}
extension RichMessageKit.MessageTheme {
  public typealias MessageStatusType = RichMessageKit.KBMMessageStatus
  public enum StatusIcon {
    case templateImageWithTint(image: UIKit.UIImage, tintColor: UIKit.UIColor)
    case normalImage(image: UIKit.UIImage)
    case none
  }
  public struct SentMessageStatus {
    public var stateViewSize: CoreFoundation.CGSize
    public mutating func set(icon: RichMessageKit.MessageTheme.StatusIcon, for type: RichMessageKit.MessageTheme.MessageStatusType)
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ReceivedFAQMessageCell : RichMessageKit.KBMRichMessageChatBaseCell<RichMessageKit.FAQMessage> {
  public enum Config {
    public static var maxWidth: CoreFoundation.CGFloat
    public enum MessageView {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
    }
    public enum ProfileImage {
      public static var width: CoreFoundation.CGFloat
      public static var height: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum TimeLabel {
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum DisplayName {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
    }
    public enum FAQView {
      public static var topPadding: CoreFoundation.CGFloat
      public static var leftPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
  }
  @_Concurrency.MainActor(unsafe) public var faqSelected: ((_ index: Swift.Int?, _ title: Swift.String) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.FAQMessage, samePreviousMessageAuthor: Swift.Bool, sameNextMessageAuthor: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public class func rowHeight(model: RichMessageKit.FAQMessage, samePreviousMessageAuthor: Swift.Bool? = false, sameNextMessageAuthor: Swift.Bool? = false) -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SentFAQMessageCell : RichMessageKit.KBMRichMessageChatBaseCell<RichMessageKit.FAQMessage> {
  public enum Config {
    public static var maxWidth: CoreFoundation.CGFloat
    public enum MessageView {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum StateView {
      public static var rightPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum TimeLabel {
      public static var rightPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum FaqView {
      public static var topPadding: CoreFoundation.CGFloat
      public static var leftPadding: CoreFoundation.CGFloat
    }
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.FAQMessage, samePreviousMessageAuthor: Swift.Bool, sameNextMessageAuthor: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public class func rowHeight(model: RichMessageKit.FAQMessage) -> CoreFoundation.CGFloat
  @objc deinit
}
public struct FAQMessage {
  public var message: RichMessageKit.Message
  public var title: Swift.String?
  public var description: Swift.String?
  public var buttonLabel: Swift.String?
  public var buttons: [Swift.String]
  public var templateId: Swift.String
  public init(message: RichMessageKit.Message, title: Swift.String?, description: Swift.String?, buttonLabel: Swift.String?, buttons: [Swift.String], templateId: Swift.String)
}
extension UIKit.UIColor {
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int)
  convenience public init(netHex: Swift.Int)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SentMessageView : UIKit.UIView {
  public enum Config {
    public enum MessageView {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, padding: RichMessageKit.Padding, maxWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.Message)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.Message, maxWidth: CoreFoundation.CGFloat, font _: UIKit.UIFont = UIFont(), padding: RichMessageKit.Padding?) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FAQMessageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var verticalSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var faqSelected: ((_ index: Swift.Int?, _ title: Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, faqStyle: RichMessageKit.FAQMessageStyle, alignLeft: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.FAQMessage, maxWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func rowHeight(model: RichMessageKit.FAQMessage, maxWidth: CoreFoundation.CGFloat, style: RichMessageKit.FAQMessageStyle) -> CoreFoundation.CGFloat
  @objc deinit
}
extension RichMessageKit.FAQMessageView : RichMessageKit.Tappable {
  @_Concurrency.MainActor(unsafe) public func didTap(index: Swift.Int?, title: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMRichMessageChatBaseCell<T> : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var defaultAvatar: UIKit.UIImage?
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
public enum ChatCellPadding {
  public enum SentMessage {
    public enum Message {
      public static let left: CoreFoundation.CGFloat
    }
    public enum QuickReply {
      public static let left: CoreFoundation.CGFloat
      public static let top: CoreFoundation.CGFloat
      public static let bottom: CoreFoundation.CGFloat
    }
    public enum MessageButton {
      public static let left: CoreFoundation.CGFloat
      public static let right: CoreFoundation.CGFloat
      public static let top: CoreFoundation.CGFloat
      public static let bottom: CoreFoundation.CGFloat
    }
  }
  public enum ReceivedMessage {
    public enum Message {
      public static let left: CoreFoundation.CGFloat
      public static let right: CoreFoundation.CGFloat
      public static let top: CoreFoundation.CGFloat
    }
    public enum QuickReply {
      public static let left: CoreFoundation.CGFloat
      public static let top: CoreFoundation.CGFloat
      public static let right: CoreFoundation.CGFloat
      public static let bottom: CoreFoundation.CGFloat
    }
    public enum MessageButton {
      public static let left: CoreFoundation.CGFloat
      public static let right: CoreFoundation.CGFloat
      public static let top: CoreFoundation.CGFloat
      public static let bottom: CoreFoundation.CGFloat
    }
  }
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func setStyle(_ style: RichMessageKit.Style)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ImageContainer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var captionTopPadding: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, maxWidth: CoreFoundation.CGFloat, isMyMessage: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.ImageMessage)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.ImageMessage, maxWidth: CoreFoundation.CGFloat, font _: UIKit.UIFont = UIFont()) -> CoreFoundation.CGFloat
  @objc deinit
}
public protocol Tappable : AnyObject {
  func didTap(index: Swift.Int?, title: Swift.String)
}
public struct Style {
  public let font: UIKit.UIFont
  public let text: UIKit.UIColor
  public let background: UIKit.UIColor
  public let linkTextColor: UIKit.UIColor
  public init(font: UIKit.UIFont, text: UIKit.UIColor, background: UIKit.UIColor)
  public init(font: UIKit.UIFont, text: UIKit.UIColor)
  public init(font: UIKit.UIFont, text: UIKit.UIColor, linkTextColor: UIKit.UIColor)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addViewsForAutolayout(views: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) public func constraint(withIdentifier: Swift.String) -> UIKit.NSLayoutConstraint?
}
public protocol KBMRichButtonStyleDelegate : AnyObject {
  func getButtonStyle(buttonModel: RichMessageKit.KBMButtonModel) -> RichMessageKit.KBMRichMessageButtonStyle
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CurvedImageButton : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public static var richMessageButtonStyleDelegate: RichMessageKit.KBMRichButtonStyleDelegate?
  public struct Config {
    public var style: RichMessageKit.KBMRichMessageButtonStyle
    public init()
  }
  @_Concurrency.MainActor(unsafe) public var index: Swift.Int?
  @_Concurrency.MainActor(unsafe) weak public var delegate: RichMessageKit.Tappable?
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, attributedText: Foundation.NSMutableAttributedString?, image: UIKit.UIImage? = nil, config: RichMessageKit.CurvedImageButton.Config = Config(), maxWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func buttonWidth() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public func buttonHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public class func buttonSize(text: Swift.String, image: UIKit.UIImage? = nil, maxWidth: CoreFoundation.CGFloat, config: RichMessageKit.CurvedImageButton.Config = Config()) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public class func buttonSize(attributedText: Foundation.NSMutableAttributedString, image: UIKit.UIImage? = nil, maxWidth: CoreFoundation.CGFloat, config: RichMessageKit.CurvedImageButton.Config = Config()) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public func updateView(text: Swift.String?, attributedText: Foundation.NSMutableAttributedString?, config: RichMessageKit.CurvedImageButton.Config)
  @objc deinit
}
public struct KBMRichMessageButtonStyle {
  public init()
  public var borderColor: CoreGraphics.CGColor
  public var backgroundColor: UIKit.UIColor
  public var textStyle: RichMessageKit.Style
  public var cornerRadius: CoreFoundation.CGFloat
  public var borderWidth: CoreFoundation.CGFloat
  public var textAlignment: UIKit.NSTextAlignment
  public var linkIcon: UIKit.UIImage?
  public var tintColor: UIKit.UIColor
  public var textImageSpace: CoreFoundation.CGFloat
  public var imageSize: CoreFoundation.CGSize
  public var disableImageTintColor: Swift.Bool
  public var padding: RichMessageKit.Padding
}
public struct KBMButtonModel {
  public init(templateId: Swift.String, name: Swift.String?, url: Swift.String?, type: RichMessageKit.KBMButtonModel.KBMButtonType)
  public enum KBMButtonType {
    case link
    case normal
    public static func == (a: RichMessageKit.KBMButtonModel.KBMButtonType, b: RichMessageKit.KBMButtonModel.KBMButtonType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let templateId: Swift.String
  public let name: Swift.String?
  public let url: Swift.String?
  public let type: RichMessageKit.KBMButtonModel.KBMButtonType
}
public enum KBMMessageStatus : Swift.CaseIterable {
  case pending
  case sent
  case delivered
  case read
  public static func == (a: RichMessageKit.KBMMessageStatus, b: RichMessageKit.KBMMessageStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [RichMessageKit.KBMMessageStatus]
  public static var allCases: [RichMessageKit.KBMMessageStatus] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct Message {
  public enum ContentType : Swift.Int16 {
    case text
    case attachment
    case location
    case html
    case textUrl
    case price
    case contact
    case audio
    case video
    case actionMessage
    public init?(rawValue: Swift.Int16)
    public typealias RawValue = Swift.Int16
    public var rawValue: Swift.Int16 {
      get
    }
  }
  public init(identifier: Swift.String, text: Swift.String?, isMyMessage: Swift.Bool, time: Swift.String, displayName: Swift.String?, status: RichMessageKit.KBMMessageStatus?, imageURL: Foundation.URL?, contentType: RichMessageKit.Message.ContentType)
  public var identifier: Swift.String
  public var text: Swift.String?
  public var isMyMessage: Swift.Bool
  public var time: Swift.String
  public var displayName: Swift.String?
  public var status: RichMessageKit.KBMMessageStatus?
  public var imageURL: Foundation.URL?
  public var contentType: RichMessageKit.Message.ContentType
}
public struct ImageBubbleStyle {
  public var captionStyle: RichMessageKit.Style
  public var bubble: RichMessageKit.MessageBubbleStyle
  public var widthRatio: CoreFoundation.CGFloat
  public var heightRatio: CoreFoundation.CGFloat
  public init()
}
public enum ImageBubbleTheme {
  public static var sentMessage: RichMessageKit.ImageBubbleStyle
  public static var receivedMessage: RichMessageKit.ImageBubbleStyle
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MessageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(bubbleStyle: RichMessageKit.MessageBubbleStyle, messageStyle: RichMessageKit.Style, maxWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.Message)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.Message, maxWidth: CoreFoundation.CGFloat, font: UIKit.UIFont, padding: RichMessageKit.Padding?) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public func updateHeighOfView(hideView: Swift.Bool, model: RichMessageKit.Message)
  @objc deinit
}
public struct FAQMessageStyle {
  public var title: RichMessageKit.Style
  public var description: RichMessageKit.Style
  public var buttonLabel: RichMessageKit.Style
  public var bubble: RichMessageKit.MessageBubbleStyle
}
public enum FAQMessageTheme {
  public static var sentMessage: RichMessageKit.FAQMessageStyle
  public static var receivedMessage: RichMessageKit.FAQMessageStyle
}
public struct ImageMessage {
  public var caption: Swift.String?
  public var url: Swift.String
  public var message: RichMessageKit.Message
  public init(caption: Swift.String?, url: Swift.String, message: RichMessageKit.Message)
}
extension Swift.String {
  public func rectWithConstrainedWidth(_ width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGRect
  public func heightWithConstrainedWidth(_ width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
}
extension Foundation.NSMutableAttributedString {
  public func rectWithConstrainedWidth(_ width: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
  public func heightWithConstrainedWidth(_ width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ReceivedButtonsCell : RichMessageKit.KBMRichMessageChatBaseCell<RichMessageKit.SuggestedReplyMessage> {
  @_Concurrency.MainActor(unsafe) public var tapped: ((_ index: Swift.Int, _ name: Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.SuggestedReplyMessage, samePreviousMessageAuthor: Swift.Bool, sameNextMessageAuthor: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.SuggestedReplyMessage, samePreviousMessageAuthor: Swift.Bool = false, sameNextMessageAuthor: Swift.Bool = false) -> CoreFoundation.CGFloat
  @objc deinit
}
extension RichMessageKit.ReceivedButtonsCell : RichMessageKit.Tappable {
  @_Concurrency.MainActor(unsafe) public func didTap(index: Swift.Int?, title: Swift.String)
}
public class SentMessageViewSizeCalculator {
  public init()
  public func rowHeight(messageModel: RichMessageKit.Message, maxWidth: CoreFoundation.CGFloat, padding: RichMessageKit.Padding) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ReceivedMessageView : UIKit.UIView {
  public enum Config {
    public enum MessageView {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, padding: RichMessageKit.Padding, maxWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.Message)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.Message, maxWidth: CoreFoundation.CGFloat, font _: UIKit.UIFont = UIFont(), padding: RichMessageKit.Padding?) -> CoreFoundation.CGFloat
  @objc deinit
}
public enum KBMRichMessageStyles {
  public struct KBMQuickReplyButtonStyle {
    public static var shared: RichMessageKit.KBMRichMessageStyles.KBMQuickReplyButtonStyle
    public struct Color {
      public var border: CoreGraphics.CGColor
      public var background: UIKit.UIColor
      public var tint: UIKit.UIColor
      public var deactivatedButtonColor: UIKit.UIColor
    }
    public var curvedButtonTextStyle: RichMessageKit.Style
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var buttonColor: RichMessageKit.KBMRichMessageStyles.KBMQuickReplyButtonStyle.Color
    public var padding: RichMessageKit.Padding
    public var verticalSpacing: CoreFoundation.CGFloat
    public var horizontalSpacing: CoreFoundation.CGFloat
    public var linkIcon: UIKit.UIImage?
    public var textImageSpace: CoreFoundation.CGFloat
    public var imageSize: CoreFoundation.CGSize
    public var disableImageTintColor: Swift.Bool
  }
}
public struct SuggestedReplyMessage {
  public enum SuggestionType {
    case link
    case normal
    public static func == (a: RichMessageKit.SuggestedReplyMessage.SuggestionType, b: RichMessageKit.SuggestedReplyMessage.SuggestionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Suggestion {
    public var reply: Swift.String?
    public init(templateId: Swift.String, title: Swift.String, reply: Swift.String? = nil, type: RichMessageKit.SuggestedReplyMessage.SuggestionType = .normal, url: Swift.String?)
  }
  public var suggestion: [RichMessageKit.SuggestedReplyMessage.Suggestion]
  public var message: RichMessageKit.Message
  public init(suggestion: [RichMessageKit.SuggestedReplyMessage.Suggestion], message: RichMessageKit.Message)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SentButtonsCell : RichMessageKit.KBMRichMessageChatBaseCell<RichMessageKit.SuggestedReplyMessage> {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.SuggestedReplyMessage, samePreviousMessageAuthor: Swift.Bool, sameNextMessageAuthor: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.SuggestedReplyMessage) -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SentImageMessageCell : RichMessageKit.KBMRichMessageChatBaseCell<RichMessageKit.ImageMessage> {
  public enum Config {
    public static var maxWidth: CoreFoundation.CGFloat
    public enum MessageView {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum StateView {
      public static var rightPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum TimeLabel {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
    }
    public enum ImageBubbleView {
      public static var topPadding: CoreFoundation.CGFloat
      public static var leftPadding: CoreFoundation.CGFloat
    }
  }
  @_Concurrency.MainActor(unsafe) public var imageTapped: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.ImageMessage, samePreviousMessageAuthor: Swift.Bool, sameNextMessageAuthor: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.ImageMessage) -> CoreFoundation.CGFloat
  @objc deinit
}
public struct Padding {
  public let left: CoreFoundation.CGFloat
  public let right: CoreFoundation.CGFloat
  public let top: CoreFoundation.CGFloat
  public let bottom: CoreFoundation.CGFloat
  public init(left: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat)
}
extension UIKit.UIImage {
  public func scale(with size: CoreFoundation.CGSize) -> UIKit.UIImage?
}
public struct ButtonStyle {
  public let font: UIKit.UIFont
  public let titleColor: UIKit.UIColor
  public let titleColorDisabled: UIKit.UIColor
  public let titleColorHighlighted: UIKit.UIColor
  public let background: UIKit.UIColor
  public let title: Swift.String
  public init(font: UIKit.UIFont, titleColor: UIKit.UIColor, titleColorDisabled: UIKit.UIColor, titleColorHighlighted: UIKit.UIColor, background: UIKit.UIColor, title: Swift.String)
  public init(font: UIKit.UIFont, title: Swift.String)
}
extension Foundation.Bundle {
  public static var richMessageKit: Foundation.Bundle {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SuggestedReplyView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: RichMessageKit.Tappable?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.SuggestedReplyMessage, maxWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.SuggestedReplyMessage, maxWidth: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc deinit
}
extension RichMessageKit.SuggestedReplyView : RichMessageKit.Tappable {
  @_Concurrency.MainActor(unsafe) public func didTap(index: Swift.Int?, title: Swift.String)
}
public class ReceivedMessageViewSizeCalculator {
  public init()
  public func rowHeight(messageModel: RichMessageKit.Message, maxWidth: CoreFoundation.CGFloat, padding: RichMessageKit.Padding) -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ReceivedImageMessageCell : RichMessageKit.KBMRichMessageChatBaseCell<RichMessageKit.ImageMessage> {
  public enum Config {
    public static var maxWidth: CoreFoundation.CGFloat
    public enum MessageView {
      public static var leftPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
    }
    public enum ProfileImage {
      public static var width: CoreFoundation.CGFloat
      public static var height: CoreFoundation.CGFloat
      public static var bottomPadding: CoreFoundation.CGFloat
    }
    public enum TimeLabel {
      public static var rightPadding: CoreFoundation.CGFloat
      public static var topPadding: CoreFoundation.CGFloat
    }
    public enum DisplayName {
      public static var topPadding: CoreFoundation.CGFloat
      public static var leftPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
    }
    public enum ImageBubbleView {
      public static var topPadding: CoreFoundation.CGFloat
      public static var leftPadding: CoreFoundation.CGFloat
      public static var rightPadding: CoreFoundation.CGFloat
    }
  }
  @_Concurrency.MainActor(unsafe) public var imageTapped: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func update(model: RichMessageKit.ImageMessage, samePreviousMessageAuthor: Swift.Bool, sameNextMessageAuthor: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func rowHeight(model: RichMessageKit.ImageMessage, samePreviousMessageAuthor: Swift.Bool, sameNextMessageAuthor: Swift.Bool) -> CoreFoundation.CGFloat
  @objc deinit
}
extension UIKit.NSLayoutDimension {
  @_Concurrency.MainActor(unsafe) public func constraintEqualToAnchor(constant: CoreFoundation.CGFloat, identifier: Swift.String) -> UIKit.NSLayoutConstraint
}
extension RichMessageKit.KBMButtonModel.KBMButtonType : Swift.Equatable {}
extension RichMessageKit.KBMButtonModel.KBMButtonType : Swift.Hashable {}
extension RichMessageKit.KBMMessageStatus : Swift.Equatable {}
extension RichMessageKit.KBMMessageStatus : Swift.Hashable {}
extension RichMessageKit.Message.ContentType : Swift.Equatable {}
extension RichMessageKit.Message.ContentType : Swift.Hashable {}
extension RichMessageKit.Message.ContentType : Swift.RawRepresentable {}
extension RichMessageKit.SuggestedReplyMessage.SuggestionType : Swift.Equatable {}
extension RichMessageKit.SuggestedReplyMessage.SuggestionType : Swift.Hashable {}
