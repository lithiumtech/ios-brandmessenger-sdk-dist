// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwipeCellKit
import Foundation
import Swift
@_exported import SwipeCellKit
import UIKit
import _Concurrency
public enum SwipeActionStyle : Swift.Int {
  case `default`
  case destructive
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class SwipeAction : ObjectiveC.NSObject {
  public var identifier: Swift.String?
  public var title: Swift.String?
  public var style: SwipeCellKit.SwipeActionStyle
  public var transitionDelegate: SwipeCellKit.SwipeActionTransitioning?
  public var font: UIKit.UIFont?
  public var textColor: UIKit.UIColor?
  public var highlightedTextColor: UIKit.UIColor?
  public var image: UIKit.UIImage?
  public var highlightedImage: UIKit.UIImage?
  public var handler: ((SwipeCellKit.SwipeAction, Foundation.IndexPath) -> Swift.Void)?
  public var backgroundColor: UIKit.UIColor?
  public var highlightedBackgroundColor: UIKit.UIColor?
  public var backgroundEffect: UIKit.UIVisualEffect?
  public var hidesWhenSelected: Swift.Bool
  public init(style: SwipeCellKit.SwipeActionStyle, title: Swift.String?, handler: ((SwipeCellKit.SwipeAction, Foundation.IndexPath) -> Swift.Void)?)
  public func fulfill(with style: SwipeCellKit.ExpansionFulfillmentStyle)
  @objc deinit
}
public enum ExpansionFulfillmentStyle {
  case delete
  case reset
  public static func == (a: SwipeCellKit.ExpansionFulfillmentStyle, b: SwipeCellKit.ExpansionFulfillmentStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwipeCellKit.SwipeCollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var swipeOffset: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func hideSwipe(animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showSwipe(orientation: SwipeCellKit.SwipeActionsOrientation, animated: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setSwipeOffset(_ offset: CoreGraphics.CGFloat, animated: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SwipeTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) weak public var delegate: SwipeCellKit.SwipeTableViewCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var layoutMargins: UIKit.UIEdgeInsets {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
public protocol SwipeCollectionViewCellDelegate : AnyObject {
  func collectionView(_ collectionView: UIKit.UICollectionView, editActionsForItemAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation) -> [SwipeCellKit.SwipeAction]?
  func collectionView(_ collectionView: UIKit.UICollectionView, editActionsOptionsForItemAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation) -> SwipeCellKit.SwipeOptions
  func collectionView(_ collectionView: UIKit.UICollectionView, willBeginEditingItemAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation)
  func collectionView(_ collectionView: UIKit.UICollectionView, didEndEditingItemAt indexPath: Foundation.IndexPath?, for orientation: SwipeCellKit.SwipeActionsOrientation)
  func visibleRect(for collectionView: UIKit.UICollectionView) -> CoreGraphics.CGRect?
}
extension SwipeCellKit.SwipeCollectionViewCellDelegate {
  public func collectionView(_ collectionView: UIKit.UICollectionView, editActionsOptionsForItemAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation) -> SwipeCellKit.SwipeOptions
  public func collectionView(_ collectionView: UIKit.UICollectionView, willBeginEditingItemAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation)
  public func collectionView(_ collectionView: UIKit.UICollectionView, didEndEditingItemAt indexPath: Foundation.IndexPath?, for orientation: SwipeCellKit.SwipeActionsOrientation)
  public func visibleRect(for collectionView: UIKit.UICollectionView) -> CoreGraphics.CGRect?
}
extension SwipeCellKit.SwipeTableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
extension SwipeCellKit.SwipeTableViewCell {
  @objc override dynamic open var accessibilityCustomActions: [UIKit.UIAccessibilityCustomAction]? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SwipeCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) weak public var delegate: SwipeCellKit.SwipeCollectionViewCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var layoutMargins: UIKit.UIEdgeInsets {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
public struct SwipeExpansionStyle {
  public static var selection: SwipeCellKit.SwipeExpansionStyle {
    get
  }
  public static var destructive: SwipeCellKit.SwipeExpansionStyle {
    get
  }
  public static var destructiveAfterFill: SwipeCellKit.SwipeExpansionStyle {
    get
  }
  public static var fill: SwipeCellKit.SwipeExpansionStyle {
    get
  }
  public static func destructive(automaticallyDelete: Swift.Bool, timing: SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming = .with) -> SwipeCellKit.SwipeExpansionStyle
  public let target: SwipeCellKit.SwipeExpansionStyle.Target
  public let additionalTriggers: [SwipeCellKit.SwipeExpansionStyle.Trigger]
  public let elasticOverscroll: Swift.Bool
  public let completionAnimation: SwipeCellKit.SwipeExpansionStyle.CompletionAnimation
  public var minimumTargetOverscroll: CoreGraphics.CGFloat
  public var targetOverscrollElasticity: CoreGraphics.CGFloat
  public init(target: SwipeCellKit.SwipeExpansionStyle.Target, additionalTriggers: [SwipeCellKit.SwipeExpansionStyle.Trigger] = [], elasticOverscroll: Swift.Bool = false, completionAnimation: SwipeCellKit.SwipeExpansionStyle.CompletionAnimation = .bounce)
}
extension SwipeCellKit.SwipeExpansionStyle {
  public enum Target {
    case percentage(CoreGraphics.CGFloat)
    case edgeInset(CoreGraphics.CGFloat)
  }
  public enum Trigger {
    case touchThreshold(CoreGraphics.CGFloat)
    case overscroll(CoreGraphics.CGFloat)
  }
  public enum CompletionAnimation {
    case fill(SwipeCellKit.SwipeExpansionStyle.FillOptions)
    case bounce
  }
  public struct FillOptions {
    public enum HandlerInvocationTiming {
      case with
      case after
      public static func == (a: SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming, b: SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public static func automatic(_ style: SwipeCellKit.ExpansionFulfillmentStyle, timing: SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming) -> SwipeCellKit.SwipeExpansionStyle.FillOptions
    public static func manual(timing: SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming) -> SwipeCellKit.SwipeExpansionStyle.FillOptions
    public let autoFulFillmentStyle: SwipeCellKit.ExpansionFulfillmentStyle?
    public let timing: SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming
  }
}
extension SwipeCellKit.SwipeExpansionStyle.Target : Swift.Equatable {
  public static func == (lhs: SwipeCellKit.SwipeExpansionStyle.Target, rhs: SwipeCellKit.SwipeExpansionStyle.Target) -> Swift.Bool
}
extension SwipeCellKit.SwipeExpansionStyle.CompletionAnimation : Swift.Equatable {
  public static func == (lhs: SwipeCellKit.SwipeExpansionStyle.CompletionAnimation, rhs: SwipeCellKit.SwipeExpansionStyle.CompletionAnimation) -> Swift.Bool
}
extension SwipeCellKit.SwipeCollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
extension SwipeCellKit.SwipeCollectionViewCell {
  @objc override dynamic open var accessibilityCustomActions: [UIKit.UIAccessibilityCustomAction]? {
    @objc get
    @objc set
  }
}
public protocol SwipeTableViewCellDelegate : AnyObject {
  func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation) -> [SwipeCellKit.SwipeAction]?
  func tableView(_ tableView: UIKit.UITableView, editActionsOptionsForRowAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation) -> SwipeCellKit.SwipeOptions
  func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation)
  func tableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?, for orientation: SwipeCellKit.SwipeActionsOrientation)
  func visibleRect(for tableView: UIKit.UITableView) -> CoreGraphics.CGRect?
}
extension SwipeCellKit.SwipeTableViewCellDelegate {
  public func tableView(_ tableView: UIKit.UITableView, editActionsOptionsForRowAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation) -> SwipeCellKit.SwipeOptions
  public func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation)
  public func tableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?, for orientation: SwipeCellKit.SwipeActionsOrientation)
  public func visibleRect(for tableView: UIKit.UITableView) -> CoreGraphics.CGRect?
}
public protocol SwipeActionTransitioning {
  func didTransition(with context: SwipeCellKit.SwipeActionTransitioningContext)
}
public struct SwipeActionTransitioningContext {
  public let actionIdentifier: Swift.String?
  public let button: UIKit.UIButton
  public let newPercentVisible: CoreGraphics.CGFloat
  public let oldPercentVisible: CoreGraphics.CGFloat
  public func setBackgroundColor(_ color: UIKit.UIColor?)
}
public struct ScaleTransition : SwipeCellKit.SwipeActionTransitioning {
  public static var `default`: SwipeCellKit.ScaleTransition {
    get
  }
  public let duration: Swift.Double
  public let initialScale: CoreGraphics.CGFloat
  public let threshold: CoreGraphics.CGFloat
  public init(duration: Swift.Double = 0.15, initialScale: CoreGraphics.CGFloat = 0.8, threshold: CoreGraphics.CGFloat = 0.5)
  public func didTransition(with context: SwipeCellKit.SwipeActionTransitioningContext)
}
public typealias SwipeTableOptions = SwipeCellKit.SwipeOptions
public struct SwipeOptions {
  public var transitionStyle: SwipeCellKit.SwipeTransitionStyle
  public var expansionStyle: SwipeCellKit.SwipeExpansionStyle?
  public var expansionDelegate: SwipeCellKit.SwipeExpanding?
  public var backgroundColor: UIKit.UIColor?
  public var maximumButtonWidth: CoreGraphics.CGFloat?
  public var minimumButtonWidth: CoreGraphics.CGFloat?
  public var buttonVerticalAlignment: SwipeCellKit.SwipeVerticalAlignment
  public var buttonPadding: CoreGraphics.CGFloat?
  public var buttonSpacing: CoreGraphics.CGFloat?
  public init()
}
public enum SwipeTransitionStyle {
  case border
  case drag
  case reveal
  public static func == (a: SwipeCellKit.SwipeTransitionStyle, b: SwipeCellKit.SwipeTransitionStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SwipeActionsOrientation : CoreGraphics.CGFloat {
  case left
  case right
  public init?(rawValue: CoreGraphics.CGFloat)
  public typealias RawValue = CoreGraphics.CGFloat
  public var rawValue: CoreGraphics.CGFloat {
    get
  }
}
public enum SwipeVerticalAlignment {
  case centerFirstBaseline
  case center
  public static func == (a: SwipeCellKit.SwipeVerticalAlignment, b: SwipeCellKit.SwipeVerticalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SwipeExpanding {
  func animationTimingParameters(buttons: [UIKit.UIButton], expanding: Swift.Bool) -> SwipeCellKit.SwipeExpansionAnimationTimingParameters
  func actionButton(_ button: UIKit.UIButton, didChange expanding: Swift.Bool, otherActionButtons: [UIKit.UIButton])
}
public struct SwipeExpansionAnimationTimingParameters {
  public static var `default`: SwipeCellKit.SwipeExpansionAnimationTimingParameters {
    get
  }
  public var duration: Swift.Double
  public var delay: Swift.Double
  public init(duration: Swift.Double = 0.6, delay: Swift.Double = 0)
}
public struct ScaleAndAlphaExpansion : SwipeCellKit.SwipeExpanding {
  public static var `default`: SwipeCellKit.ScaleAndAlphaExpansion {
    get
  }
  public let duration: Swift.Double
  public let scale: CoreGraphics.CGFloat
  public let interButtonDelay: Swift.Double
  public init(duration: Swift.Double = 0.15, scale: CoreGraphics.CGFloat = 0.8, interButtonDelay: Swift.Double = 0.1)
  public func animationTimingParameters(buttons: [UIKit.UIButton], expanding: Swift.Bool) -> SwipeCellKit.SwipeExpansionAnimationTimingParameters
  public func actionButton(_ button: UIKit.UIButton, didChange expanding: Swift.Bool, otherActionButtons: [UIKit.UIButton])
}
extension SwipeCellKit.SwipeTableViewCell {
  @_Concurrency.MainActor(unsafe) public var swipeOffset: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func hideSwipe(animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showSwipe(orientation: SwipeCellKit.SwipeActionsOrientation, animated: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setSwipeOffset(_ offset: CoreGraphics.CGFloat, animated: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
extension SwipeCellKit.SwipeActionStyle : Swift.Equatable {}
extension SwipeCellKit.SwipeActionStyle : Swift.Hashable {}
extension SwipeCellKit.SwipeActionStyle : Swift.RawRepresentable {}
extension SwipeCellKit.ExpansionFulfillmentStyle : Swift.Equatable {}
extension SwipeCellKit.ExpansionFulfillmentStyle : Swift.Hashable {}
extension SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming : Swift.Equatable {}
extension SwipeCellKit.SwipeExpansionStyle.FillOptions.HandlerInvocationTiming : Swift.Hashable {}
extension SwipeCellKit.SwipeTransitionStyle : Swift.Equatable {}
extension SwipeCellKit.SwipeTransitionStyle : Swift.Hashable {}
extension SwipeCellKit.SwipeActionsOrientation : Swift.Equatable {}
extension SwipeCellKit.SwipeActionsOrientation : Swift.Hashable {}
extension SwipeCellKit.SwipeActionsOrientation : Swift.RawRepresentable {}
extension SwipeCellKit.SwipeVerticalAlignment : Swift.Equatable {}
extension SwipeCellKit.SwipeVerticalAlignment : Swift.Hashable {}
