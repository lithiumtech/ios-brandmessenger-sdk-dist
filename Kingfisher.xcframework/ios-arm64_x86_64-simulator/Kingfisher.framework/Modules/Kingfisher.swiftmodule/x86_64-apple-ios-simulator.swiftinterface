// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Kingfisher
import AVKit
import Accelerate
import CarPlay
import Combine
import CommonCrypto
import CoreGraphics
import CoreImage
import Foundation
import ImageIO
import MobileCoreServices
import Swift
import SwiftUI
import UIKit
import _Concurrency
public protocol ImageModifier {
  func modify(_ image: Kingfisher.KFCrossPlatformImage) -> Kingfisher.KFCrossPlatformImage
}
public struct AnyImageModifier : Kingfisher.ImageModifier {
  public init(modify: @escaping (Kingfisher.KFCrossPlatformImage) throws -> Kingfisher.KFCrossPlatformImage)
  public func modify(_ image: Kingfisher.KFCrossPlatformImage) -> Kingfisher.KFCrossPlatformImage
}
public struct RenderingModeImageModifier : Kingfisher.ImageModifier {
  public let renderingMode: UIKit.UIImage.RenderingMode
  public init(renderingMode: UIKit.UIImage.RenderingMode = .automatic)
  public func modify(_ image: Kingfisher.KFCrossPlatformImage) -> Kingfisher.KFCrossPlatformImage
}
public struct FlipsForRightToLeftLayoutDirectionImageModifier : Kingfisher.ImageModifier {
  public init()
  public func modify(_ image: Kingfisher.KFCrossPlatformImage) -> Kingfisher.KFCrossPlatformImage
}
public struct AlignmentRectInsetsImageModifier : Kingfisher.ImageModifier {
  public let alignmentInsets: UIKit.UIEdgeInsets
  public init(alignmentInsets: UIKit.UIEdgeInsets)
  public func modify(_ image: Kingfisher.KFCrossPlatformImage) -> Kingfisher.KFCrossPlatformImage
}
public protocol CacheSerializer {
  func data(with image: Kingfisher.KFCrossPlatformImage, original: Foundation.Data?) -> Foundation.Data?
  func image(with data: Foundation.Data, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct DefaultCacheSerializer : Kingfisher.CacheSerializer {
  public static let `default`: Kingfisher.DefaultCacheSerializer
  public var compressionQuality: CoreGraphics.CGFloat
  public var preferCacheOriginalData: Swift.Bool
  public init()
  public func data(with image: Kingfisher.KFCrossPlatformImage, original: Foundation.Data?) -> Foundation.Data?
  public func image(with data: Foundation.Data, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public protocol ImageDataProvider {
  var cacheKey: Swift.String { get }
  func data(handler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  var contentURL: Foundation.URL? { get }
}
extension Kingfisher.ImageDataProvider {
  public var contentURL: Foundation.URL? {
    get
  }
  public func convertToSource() -> Kingfisher.Source
}
public struct LocalFileImageDataProvider : Kingfisher.ImageDataProvider {
  public let fileURL: Foundation.URL
  public init(fileURL: Foundation.URL, cacheKey: Swift.String? = nil, loadingQueue: Kingfisher.ExecutionQueue = .dispatch(DispatchQueue.global(qos: .userInitiated)))
  public var cacheKey: Swift.String
  public func data(handler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  public var contentURL: Foundation.URL? {
    get
  }
}
public struct Base64ImageDataProvider : Kingfisher.ImageDataProvider {
  public let base64String: Swift.String
  public init(base64String: Swift.String, cacheKey: Swift.String)
  public var cacheKey: Swift.String
  public func data(handler: (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
}
public struct RawImageDataProvider : Kingfisher.ImageDataProvider {
  public let data: Foundation.Data
  public init(data: Foundation.Data, cacheKey: Swift.String)
  public var cacheKey: Swift.String
  public func data(handler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
}
public protocol AnimatedImageViewDelegate : AnyObject {
  func animatedImageView(_ imageView: Kingfisher.AnimatedImageView, didPlayAnimationLoops count: Swift.UInt)
  func animatedImageViewDidFinishAnimating(_ imageView: Kingfisher.AnimatedImageView)
}
extension Kingfisher.AnimatedImageViewDelegate {
  public func animatedImageView(_ imageView: Kingfisher.AnimatedImageView, didPlayAnimationLoops count: Swift.UInt)
  public func animatedImageViewDidFinishAnimating(_ imageView: Kingfisher.AnimatedImageView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedImageView : UIKit.UIImageView {
  public enum RepeatCount : Swift.Equatable {
    case once
    case finite(count: Swift.UInt)
    case infinite
    public static func == (lhs: Kingfisher.AnimatedImageView.RepeatCount, rhs: Kingfisher.AnimatedImageView.RepeatCount) -> Swift.Bool
  }
  @_Concurrency.MainActor(unsafe) public var autoPlayAnimatedImage: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var framePreloadCount: Swift.Int
  @_Concurrency.MainActor(unsafe) public var needsPrescaling: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var backgroundDecode: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var runLoopMode: Foundation.RunLoop.Mode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var repeatCount: Kingfisher.AnimatedImageView.RepeatCount {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: Kingfisher.AnimatedImageViewDelegate?
  @_Concurrency.MainActor(unsafe) public var animator: Kingfisher.AnimatedImageView.Animator? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var image: Kingfisher.KFCrossPlatformImage? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAnimating: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func startAnimating()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func stopAnimating()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func display(_ layer: QuartzCore.CALayer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension Kingfisher.AnimatedImageView {
  @_hasMissingDesignatedInitializers public class Animator {
    final public let maxFrameCount: Swift.Int
    public var currentFrameImage: UIKit.UIImage? {
      get
    }
    public var currentFrameDuration: Foundation.TimeInterval {
      get
    }
    public var currentFrameIndex: Swift.Int {
      get
    }
    public var isLastFrame: Swift.Bool {
      get
    }
    @objc deinit
    public func frame(at index: Swift.Int) -> Kingfisher.KFCrossPlatformImage?
    public func duration(at index: Swift.Int) -> Foundation.TimeInterval
  }
}
public enum StorageExpiration {
  case never
  case seconds(Foundation.TimeInterval)
  case days(Swift.Int)
  case date(Foundation.Date)
  case expired
}
public enum ExpirationExtending {
  case none
  case cacheTime
  case expirationTime(_: Kingfisher.StorageExpiration)
}
public protocol CacheCostCalculable {
  var cacheCost: Swift.Int { get }
}
public protocol DataTransformable {
  func toData() throws -> Foundation.Data
  static func fromData(_ data: Foundation.Data) throws -> Self
  static var empty: Self { get }
}
public protocol Placeholder {
  func add(to imageView: Kingfisher.KFCrossPlatformImageView)
  func remove(from imageView: Kingfisher.KFCrossPlatformImageView)
}
extension UIKit.UIImage : Kingfisher.Placeholder {
  public func add(to imageView: Kingfisher.KFCrossPlatformImageView)
  public func remove(from imageView: Kingfisher.KFCrossPlatformImageView)
}
extension Kingfisher.Placeholder where Self : UIKit.UIView {
  public func add(to imageView: Kingfisher.KFCrossPlatformImageView)
  public func remove(from imageView: Kingfisher.KFCrossPlatformImageView)
}
public enum DiskStorage {
  @_hasMissingDesignatedInitializers public class Backend<T> where T : Kingfisher.DataTransformable {
    public var config: Kingfisher.DiskStorage.Config
    final public let directoryURL: Foundation.URL
    convenience public init(config: Kingfisher.DiskStorage.Config) throws
    public func store(value: T, forKey key: Swift.String, expiration: Kingfisher.StorageExpiration? = nil, writeOptions: Foundation.Data.WritingOptions = []) throws
    public func value(forKey key: Swift.String, extendingExpiration: Kingfisher.ExpirationExtending = .cacheTime) throws -> T?
    public func isCached(forKey key: Swift.String) -> Swift.Bool
    public func isCached(forKey key: Swift.String, referenceDate: Foundation.Date) -> Swift.Bool
    public func remove(forKey key: Swift.String) throws
    public func removeAll() throws
    public func cacheFileURL(forKey key: Swift.String) -> Foundation.URL
    public func removeExpiredValues() throws -> [Foundation.URL]
    public func totalSize() throws -> Swift.UInt
    @objc deinit
  }
}
extension Kingfisher.DiskStorage {
  public struct Config {
    public var sizeLimit: Swift.UInt
    public var expiration: Kingfisher.StorageExpiration
    public var pathExtension: Swift.String?
    public var usesHashedFileName: Swift.Bool
    public var autoExtAfterHashedFileName: Swift.Bool
    public init(name: Swift.String, sizeLimit: Swift.UInt, fileManager: Foundation.FileManager = .default, directory: Foundation.URL? = nil)
  }
}
public enum MemoryStorage {
  public class Backend<T> where T : Kingfisher.CacheCostCalculable {
    public var config: Kingfisher.MemoryStorage.Config {
      get
      set
    }
    public init(config: Kingfisher.MemoryStorage.Config)
    public func removeExpired()
    public func store(value: T, forKey key: Swift.String, expiration: Kingfisher.StorageExpiration? = nil)
    public func value(forKey key: Swift.String, extendingExpiration: Kingfisher.ExpirationExtending = .cacheTime) -> T?
    public func isCached(forKey key: Swift.String) -> Swift.Bool
    public func remove(forKey key: Swift.String)
    public func removeAll()
    @objc deinit
  }
}
extension Kingfisher.MemoryStorage {
  public struct Config {
    public var totalCostLimit: Swift.Int
    public var countLimit: Swift.Int
    public var expiration: Kingfisher.StorageExpiration
    public var cleanInterval: Foundation.TimeInterval
    public var keepWhenEnteringBackground: Swift.Bool
    public init(totalCostLimit: Swift.Int, cleanInterval: Foundation.TimeInterval = 120)
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFImage {
  @_hasMissingDesignatedInitializers public class Context<HoldingView> where HoldingView : Kingfisher.KFImageHoldingView {
    @objc deinit
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFImage.Context : Swift.Hashable {
  public static func == (lhs: Kingfisher.KFImage.Context<HoldingView>, rhs: Kingfisher.KFImage.Context<HoldingView>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFAnimatedImage {
  public typealias Context = Kingfisher.KFImage.Context
}
public struct AVAssetImageDataProvider : Kingfisher.ImageDataProvider {
  public enum AVAssetImageDataProviderError : Swift.Error {
    case userCancelled
    case invalidImage(_: CoreGraphics.CGImage?)
  }
  public let assetImageGenerator: AVFoundation.AVAssetImageGenerator
  public let time: CoreMedia.CMTime
  public var cacheKey: Swift.String {
    get
  }
  public init(assetImageGenerator: AVFoundation.AVAssetImageGenerator, time: CoreMedia.CMTime)
  public init(assetURL: Foundation.URL, time: CoreMedia.CMTime)
  public init(assetURL: Foundation.URL, seconds: Foundation.TimeInterval)
  public func data(handler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
}
public class Delegate<Input, Output> {
  public init()
  public func delegate<T>(on target: T, block: ((T, Input) -> Output)?) where T : AnyObject
  public func call(_ input: Input) -> Output?
  public func callAsFunction(_ input: Input) -> Output?
  @objc deinit
}
extension Kingfisher.Delegate where Input == Swift.Void {
  public func call() -> Output?
  public func callAsFunction() -> Output?
}
extension Kingfisher.Delegate where Input == Swift.Void, Output : Kingfisher.OptionalProtocol {
  public func call() -> Output
  public func callAsFunction() -> Output
}
extension Kingfisher.Delegate where Output : Kingfisher.OptionalProtocol {
  public func call(_ input: Input) -> Output
  public func callAsFunction(_ input: Input) -> Output
}
public protocol OptionalProtocol {
  static var _createNil: Self { get }
}
extension Swift.Optional : Kingfisher.OptionalProtocol {
  public static var _createNil: Swift.Optional<Wrapped> {
    get
  }
}
public enum ImageTransition {
  case none
  case fade(Foundation.TimeInterval)
  case flipFromLeft(Foundation.TimeInterval)
  case flipFromRight(Foundation.TimeInterval)
  case flipFromTop(Foundation.TimeInterval)
  case flipFromBottom(Foundation.TimeInterval)
  case custom(duration: Foundation.TimeInterval, options: UIKit.UIView.AnimationOptions, animations: ((UIKit.UIImageView, UIKit.UIImage) -> Swift.Void)?, completion: ((Swift.Bool) -> Swift.Void)?)
}
public struct ImageProgressive {
  public static let `default`: Kingfisher.ImageProgressive
  public init(isBlur: Swift.Bool, isFastestScan: Swift.Bool, scanInterval: Foundation.TimeInterval)
}
public enum ImageProcessItem {
  case image(Kingfisher.KFCrossPlatformImage)
  case data(Foundation.Data)
}
public protocol ImageProcessor {
  var identifier: Swift.String { get }
  func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
extension Kingfisher.ImageProcessor {
  public func append(another: Kingfisher.ImageProcessor) -> Kingfisher.ImageProcessor
}
public struct DefaultImageProcessor : Kingfisher.ImageProcessor {
  public static let `default`: Kingfisher.DefaultImageProcessor
  public let identifier: Swift.String
  public init()
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct RectCorner : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let topLeft: Kingfisher.RectCorner
  public static let topRight: Kingfisher.RectCorner
  public static let bottomLeft: Kingfisher.RectCorner
  public static let bottomRight: Kingfisher.RectCorner
  public static let all: Kingfisher.RectCorner
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = Kingfisher.RectCorner
  public typealias Element = Kingfisher.RectCorner
  public typealias RawValue = Swift.Int
}
public struct BlendImageProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let blendMode: CoreGraphics.CGBlendMode
  public let alpha: CoreGraphics.CGFloat
  public let backgroundColor: Kingfisher.KFCrossPlatformColor?
  public init(blendMode: CoreGraphics.CGBlendMode, alpha: CoreGraphics.CGFloat = 1.0, backgroundColor: Kingfisher.KFCrossPlatformColor? = nil)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public enum Radius {
  case widthFraction(CoreGraphics.CGFloat)
  case heightFraction(CoreGraphics.CGFloat)
  case point(CoreGraphics.CGFloat)
  public func compute(with size: CoreGraphics.CGSize) -> CoreGraphics.CGFloat
}
public struct RoundCornerImageProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let radius: Kingfisher.Radius
  public let roundingCorners: Kingfisher.RectCorner
  public let targetSize: CoreGraphics.CGSize?
  public let backgroundColor: Kingfisher.KFCrossPlatformColor?
  public init(cornerRadius: CoreGraphics.CGFloat, targetSize: CoreGraphics.CGSize? = nil, roundingCorners corners: Kingfisher.RectCorner = .all, backgroundColor: Kingfisher.KFCrossPlatformColor? = nil)
  public init(radius: Kingfisher.Radius, targetSize: CoreGraphics.CGSize? = nil, roundingCorners corners: Kingfisher.RectCorner = .all, backgroundColor: Kingfisher.KFCrossPlatformColor? = nil)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct Border {
  public var color: Kingfisher.KFCrossPlatformColor
  public var lineWidth: CoreGraphics.CGFloat
  public var radius: Kingfisher.Radius
  public var roundingCorners: Kingfisher.RectCorner
  public init(color: Kingfisher.KFCrossPlatformColor = .black, lineWidth: CoreGraphics.CGFloat = 4, radius: Kingfisher.Radius = .point(0), roundingCorners: Kingfisher.RectCorner = .all)
}
public struct BorderImageProcessor : Kingfisher.ImageProcessor {
  public var identifier: Swift.String {
    get
  }
  public let border: Kingfisher.Border
  public init(border: Kingfisher.Border)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public enum ContentMode {
  case none
  case aspectFit
  case aspectFill
  public static func == (a: Kingfisher.ContentMode, b: Kingfisher.ContentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ResizingImageProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let referenceSize: CoreGraphics.CGSize
  public let targetContentMode: Kingfisher.ContentMode
  public init(referenceSize: CoreGraphics.CGSize, mode: Kingfisher.ContentMode = .none)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct BlurImageProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let blurRadius: CoreGraphics.CGFloat
  public init(blurRadius: CoreGraphics.CGFloat)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct OverlayImageProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let overlay: Kingfisher.KFCrossPlatformColor
  public let fraction: CoreGraphics.CGFloat
  public init(overlay: Kingfisher.KFCrossPlatformColor, fraction: CoreGraphics.CGFloat = 0.5)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct TintImageProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let tint: Kingfisher.KFCrossPlatformColor
  public init(tint: Kingfisher.KFCrossPlatformColor)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct ColorControlsProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let brightness: CoreGraphics.CGFloat
  public let contrast: CoreGraphics.CGFloat
  public let saturation: CoreGraphics.CGFloat
  public let inputEV: CoreGraphics.CGFloat
  public init(brightness: CoreGraphics.CGFloat, contrast: CoreGraphics.CGFloat, saturation: CoreGraphics.CGFloat, inputEV: CoreGraphics.CGFloat)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct BlackWhiteProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public init()
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct CroppingImageProcessor : Kingfisher.ImageProcessor {
  public let identifier: Swift.String
  public let size: CoreGraphics.CGSize
  public let anchor: CoreGraphics.CGPoint
  public init(size: CoreGraphics.CGSize, anchor: CoreGraphics.CGPoint = CGPoint(x: 0.5, y: 0.5))
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct DownsamplingImageProcessor : Kingfisher.ImageProcessor {
  public let size: CoreGraphics.CGSize
  public let identifier: Swift.String
  public init(size: CoreGraphics.CGSize)
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
infix operator |> : AdditionPrecedence
public func |> (left: Kingfisher.ImageProcessor, right: Kingfisher.ImageProcessor) -> Kingfisher.ImageProcessor
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImage {
  public var imageFrameCount: Swift.Int? {
    get
    set
  }
  public var imageSource: ImageIO.CGImageSource? {
    get
  }
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImage {
  public var normalized: Kingfisher.KFCrossPlatformImage {
    get
  }
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImage {
  public func pngRepresentation() -> Foundation.Data?
  public func jpegRepresentation(compressionQuality: CoreGraphics.CGFloat) -> Foundation.Data?
  public func gifRepresentation() -> Foundation.Data?
  public func data(format: Kingfisher.ImageFormat, compressionQuality: CoreGraphics.CGFloat = 1.0) -> Foundation.Data?
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImage {
  public static func animatedImage(data: Foundation.Data, options: Kingfisher.ImageCreatingOptions) -> Kingfisher.KFCrossPlatformImage?
  public static func image(data: Foundation.Data, options: Kingfisher.ImageCreatingOptions) -> Kingfisher.KFCrossPlatformImage?
  public static func downsampledImage(data: Foundation.Data, to pointSize: CoreGraphics.CGSize, scale: CoreGraphics.CGFloat) -> Kingfisher.KFCrossPlatformImage?
}
extension Swift.String : Kingfisher.KingfisherCompatibleValue {
}
public protocol ImageDownloaderDelegate : AnyObject {
  func imageDownloader(_ downloader: Kingfisher.ImageDownloader, willDownloadImageForURL url: Foundation.URL, with request: Foundation.URLRequest?)
  func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didFinishDownloadingImageForURL url: Foundation.URL, with response: Foundation.URLResponse?, error: Swift.Error?)
  func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didDownload data: Foundation.Data, with dataTask: Kingfisher.SessionDataTask) -> Foundation.Data?
  func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didDownload data: Foundation.Data, for url: Foundation.URL) -> Foundation.Data?
  func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didDownload image: Kingfisher.KFCrossPlatformImage, for url: Foundation.URL, with response: Foundation.URLResponse?)
  func isValidStatusCode(_ code: Swift.Int, for downloader: Kingfisher.ImageDownloader) -> Swift.Bool
}
extension Kingfisher.ImageDownloaderDelegate {
  public func imageDownloader(_ downloader: Kingfisher.ImageDownloader, willDownloadImageForURL url: Foundation.URL, with request: Foundation.URLRequest?)
  public func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didFinishDownloadingImageForURL url: Foundation.URL, with response: Foundation.URLResponse?, error: Swift.Error?)
  public func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didDownload image: Kingfisher.KFCrossPlatformImage, for url: Foundation.URL, with response: Foundation.URLResponse?)
  public func isValidStatusCode(_ code: Swift.Int, for downloader: Kingfisher.ImageDownloader) -> Swift.Bool
  public func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didDownload data: Foundation.Data, with task: Kingfisher.SessionDataTask) -> Foundation.Data?
  public func imageDownloader(_ downloader: Kingfisher.ImageDownloader, didDownload data: Foundation.Data, for url: Foundation.URL) -> Foundation.Data?
}
public protocol KFOptionSetter {
  var options: Kingfisher.KingfisherParsedOptionsInfo { get nonmutating set }
  var onFailureDelegate: Kingfisher.Delegate<Kingfisher.KingfisherError, Swift.Void> { get }
  var onSuccessDelegate: Kingfisher.Delegate<Kingfisher.RetrieveImageResult, Swift.Void> { get }
  var onProgressDelegate: Kingfisher.Delegate<(Swift.Int64, Swift.Int64), Swift.Void> { get }
  var delegateObserver: Swift.AnyObject { get }
}
extension Kingfisher.KF.Builder : Kingfisher.KFOptionSetter {
  public var delegateObserver: Swift.AnyObject {
    get
  }
}
extension Kingfisher.KFOptionSetter {
  public func onProgress(_ block: Kingfisher.DownloadProgressBlock?) -> Self
  public func onSuccess(_ block: ((Kingfisher.RetrieveImageResult) -> Swift.Void)?) -> Self
  public func onFailure(_ block: ((Kingfisher.KingfisherError) -> Swift.Void)?) -> Self
}
extension Kingfisher.KFOptionSetter {
  public func targetCache(_ cache: Kingfisher.ImageCache) -> Self
  public func originalCache(_ cache: Kingfisher.ImageCache) -> Self
  public func downloader(_ downloader: Kingfisher.ImageDownloader) -> Self
  public func downloadPriority(_ priority: Swift.Float) -> Self
  public func forceRefresh(_ enabled: Swift.Bool = true) -> Self
  public func fromMemoryCacheOrRefresh(_ enabled: Swift.Bool = true) -> Self
  public func cacheMemoryOnly(_ enabled: Swift.Bool = true) -> Self
  public func waitForCache(_ enabled: Swift.Bool = true) -> Self
  public func onlyFromCache(_ enabled: Swift.Bool = true) -> Self
  public func backgroundDecode(_ enabled: Swift.Bool = true) -> Self
  public func callbackQueue(_ queue: Kingfisher.CallbackQueue) -> Self
  public func scaleFactor(_ factor: CoreGraphics.CGFloat) -> Self
  public func cacheOriginalImage(_ enabled: Swift.Bool = true) -> Self
  public func diskStoreWriteOptions(_ writingOptions: Foundation.Data.WritingOptions) -> Self
  public func loadDiskFileSynchronously(_ enabled: Swift.Bool = true) -> Self
  public func processingQueue(_ queue: Kingfisher.CallbackQueue?) -> Self
  public func alternativeSources(_ sources: [Kingfisher.Source]?) -> Self
  public func retry(_ strategy: Kingfisher.RetryStrategy?) -> Self
  public func retry(maxCount: Swift.Int, interval: Kingfisher.DelayRetryStrategy.Interval = .seconds(3)) -> Self
  public func lowDataModeSource(_ source: Kingfisher.Source?) -> Self
  public func forceTransition(_ enabled: Swift.Bool = true) -> Self
  public func onFailureImage(_ image: Kingfisher.KFCrossPlatformImage?) -> Self
}
extension Kingfisher.KFOptionSetter {
  public func requestModifier(_ modifier: Kingfisher.ImageDownloadRequestModifier) -> Self
  public func requestModifier(_ modifyBlock: @escaping (inout Foundation.URLRequest) -> Swift.Void) -> Self
}
extension Kingfisher.KFOptionSetter {
  public func redirectHandler(_ handler: Kingfisher.ImageDownloadRedirectHandler) -> Self
  public func redirectHandler(_ block: @escaping (Kingfisher.KF.RedirectPayload) -> Swift.Void) -> Self
}
extension Kingfisher.KFOptionSetter {
  public func setProcessor(_ processor: Kingfisher.ImageProcessor) -> Self
  public func setProcessors(_ processors: [Kingfisher.ImageProcessor]) -> Self
  public func appendProcessor(_ processor: Kingfisher.ImageProcessor) -> Self
  public func roundCorner(radius: Kingfisher.Radius, targetSize: CoreGraphics.CGSize? = nil, roundingCorners corners: Kingfisher.RectCorner = .all, backgroundColor: Kingfisher.KFCrossPlatformColor? = nil) -> Self
  public func blur(radius: CoreGraphics.CGFloat) -> Self
  public func overlay(color: Kingfisher.KFCrossPlatformColor, fraction: CoreGraphics.CGFloat = 0.5) -> Self
  public func tint(color: Kingfisher.KFCrossPlatformColor) -> Self
  public func blackWhite() -> Self
  public func cropping(size: CoreGraphics.CGSize, anchor: CoreGraphics.CGPoint = .init(x: 0.5, y: 0.5)) -> Self
  public func downsampling(size: CoreGraphics.CGSize) -> Self
  public func resizing(referenceSize: CoreGraphics.CGSize, mode: Kingfisher.ContentMode = .none) -> Self
}
extension Kingfisher.KFOptionSetter {
  public func serialize(by cacheSerializer: Kingfisher.CacheSerializer) -> Self
  public func serialize(as format: Kingfisher.ImageFormat, jpegCompressionQuality: CoreGraphics.CGFloat? = nil) -> Self
}
extension Kingfisher.KFOptionSetter {
  public func imageModifier(_ modifier: Kingfisher.ImageModifier?) -> Self
  public func imageModifier(_ block: @escaping (inout Kingfisher.KFCrossPlatformImage) throws -> Swift.Void) -> Self
}
extension Kingfisher.KFOptionSetter {
  public func memoryCacheExpiration(_ expiration: Kingfisher.StorageExpiration?) -> Self
  public func memoryCacheAccessExtending(_ extending: Kingfisher.ExpirationExtending) -> Self
  public func diskCacheExpiration(_ expiration: Kingfisher.StorageExpiration?) -> Self
  public func diskCacheAccessExtending(_ extending: Kingfisher.ExpirationExtending) -> Self
}
public enum KF {
  public static func source(_ source: Kingfisher.Source?) -> Kingfisher.KF.Builder
  public static func resource(_ resource: Kingfisher.Resource?) -> Kingfisher.KF.Builder
  public static func url(_ url: Foundation.URL?, cacheKey: Swift.String? = nil) -> Kingfisher.KF.Builder
  public static func dataProvider(_ provider: Kingfisher.ImageDataProvider?) -> Kingfisher.KF.Builder
  public static func data(_ data: Foundation.Data?, cacheKey: Swift.String) -> Kingfisher.KF.Builder
}
extension Kingfisher.KF {
  @_hasMissingDesignatedInitializers public class Builder {
    public var options: Kingfisher.KingfisherParsedOptionsInfo
    final public let onFailureDelegate: Kingfisher.Delegate<Kingfisher.KingfisherError, Swift.Void>
    final public let onSuccessDelegate: Kingfisher.Delegate<Kingfisher.RetrieveImageResult, Swift.Void>
    final public let onProgressDelegate: Kingfisher.Delegate<(Swift.Int64, Swift.Int64), Swift.Void>
    @objc deinit
  }
}
extension Kingfisher.KF.Builder {
  @discardableResult
  public func set(to imageView: Kingfisher.KFCrossPlatformImageView) -> Kingfisher.DownloadTask?
  @discardableResult
  public func set(to attachment: UIKit.NSTextAttachment, attributedView: @autoclosure @escaping () -> Kingfisher.KFCrossPlatformView) -> Kingfisher.DownloadTask?
  @discardableResult
  public func set(to button: UIKit.UIButton, for state: UIKit.UIControl.State) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setBackground(to button: UIKit.UIButton, for state: UIKit.UIControl.State) -> Kingfisher.DownloadTask?
  @available(iOS 14.0, *)
  @discardableResult
  public func set(to listItem: CarPlay.CPListItem) -> Kingfisher.DownloadTask?
}
extension Kingfisher.KF.Builder {
  public func placeholder(_ placeholder: Kingfisher.Placeholder?) -> Self
  public func placeholder(_ image: Kingfisher.KFCrossPlatformImage?) -> Self
}
extension Kingfisher.KF.Builder {
  public func transition(_ transition: Kingfisher.ImageTransition) -> Self
  public func fade(duration: Foundation.TimeInterval) -> Self
  public func keepCurrentImageWhileLoading(_ enabled: Swift.Bool = true) -> Self
  public func onlyLoadFirstFrame(_ enabled: Swift.Bool = true) -> Self
  public func progressiveJPEG(_ progressive: Kingfisher.ImageProgressive? = .default) -> Self
}
extension Kingfisher.KF.Builder {
  @available(*, deprecated, message: "This is not necessary anymore since `@StateObject` is used. It does nothing now and please just remove it.")
  public func loadImmediately(_ start: Swift.Bool = true) -> Self
}
extension Kingfisher.KF {
  public struct RedirectPayload {
    public let task: Kingfisher.SessionDataTask
    public let response: Foundation.HTTPURLResponse
    public let newRequest: Foundation.URLRequest
    public let completionHandler: (Foundation.URLRequest?) -> Swift.Void
  }
}
public typealias KFCrossPlatformImage = UIKit.UIImage
public typealias KFCrossPlatformColor = UIKit.UIColor
public typealias KFCrossPlatformImageView = UIKit.UIImageView
public typealias KFCrossPlatformView = UIKit.UIView
public typealias KFCrossPlatformButton = UIKit.UIButton
public struct KingfisherWrapper<Base> {
  public let base: Base
  public init(_ base: Base)
}
public protocol KingfisherCompatible : AnyObject {
}
public protocol KingfisherCompatibleValue {
}
extension Kingfisher.KingfisherCompatible {
  public var kf: Kingfisher.KingfisherWrapper<Self> {
    get
    set
  }
}
extension Kingfisher.KingfisherCompatibleValue {
  public var kf: Kingfisher.KingfisherWrapper<Self> {
    get
    set
  }
}
extension UIKit.UIImage : Kingfisher.KingfisherCompatible {
}
extension UIKit.UIImageView : Kingfisher.KingfisherCompatible {
}
extension UIKit.UIButton : Kingfisher.KingfisherCompatible {
}
extension UIKit.NSTextAttachment : Kingfisher.KingfisherCompatible {
}
@available(iOS 14.0, *)
extension CarPlay.CPListItem : Kingfisher.KingfisherCompatible {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct KFImage : Kingfisher.KFImageProtocol {
  public var context: Kingfisher.KFImage.Context<SwiftUI.Image>
  public init(context: Kingfisher.KFImage.Context<SwiftUI.Image>)
  public typealias Body = @_opaqueReturnTypeOf("$s10Kingfisher15KFImageProtocolPAAE4bodyQrvp", 0) __<Kingfisher.KFImage>
  public typealias HoldingView = SwiftUI.Image
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Image : Kingfisher.KFImageHoldingView {
  public typealias RenderingView = SwiftUI.Image
  public static func created(from image: Kingfisher.KFCrossPlatformImage?, context: Kingfisher.KFImage.Context<SwiftUI.Image>) -> SwiftUI.Image
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFImage {
  public func resizable(capInsets: SwiftUI.EdgeInsets = EdgeInsets(), resizingMode: SwiftUI.Image.ResizingMode = .stretch) -> Kingfisher.KFImage
  public func renderingMode(_ renderingMode: SwiftUI.Image.TemplateRenderingMode?) -> Kingfisher.KFImage
  public func interpolation(_ interpolation: SwiftUI.Image.Interpolation) -> Kingfisher.KFImage
  public func antialiased(_ isAntialiased: Swift.Bool) -> Kingfisher.KFImage
  @available(*, deprecated, message: "This is not necessary anymore since `@StateObject` is used. It does nothing now and please just remove it.")
  public func loadImmediately(_ start: Swift.Bool = true) -> Kingfisher.KFImage
}
public typealias ExecutionQueue = Kingfisher.CallbackQueue
public enum CallbackQueue {
  case mainAsync
  case mainCurrentOrAsync
  case untouch
  case dispatch(Dispatch.DispatchQueue)
  public func execute(_ block: @escaping () -> Swift.Void)
}
public struct FormatIndicatedCacheSerializer : Kingfisher.CacheSerializer {
  public static let png: Kingfisher.FormatIndicatedCacheSerializer
  public static let jpeg: Kingfisher.FormatIndicatedCacheSerializer
  public static func jpeg(compressionQuality: CoreGraphics.CGFloat) -> Kingfisher.FormatIndicatedCacheSerializer
  public static let gif: Kingfisher.FormatIndicatedCacheSerializer
  public func data(with image: Kingfisher.KFCrossPlatformImage, original: Foundation.Data?) -> Foundation.Data?
  public func image(with data: Foundation.Data, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
extension CoreGraphics.CGSize : Kingfisher.KingfisherCompatibleValue {
}
extension Kingfisher.KingfisherWrapper where Base == CoreGraphics.CGSize {
  public func resize(to size: CoreGraphics.CGSize, for contentMode: Kingfisher.ContentMode) -> CoreGraphics.CGSize
  public func constrained(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  public func filling(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  public func constrainedRect(for size: CoreGraphics.CGSize, anchor: CoreGraphics.CGPoint) -> CoreGraphics.CGRect
}
public typealias DownloadProgressBlock = ((_ receivedSize: Swift.Int64, _ totalSize: Swift.Int64) -> Swift.Void)
public struct RetrieveImageResult {
  public let image: Kingfisher.KFCrossPlatformImage
  public let cacheType: Kingfisher.CacheType
  public let source: Kingfisher.Source
  public let originalSource: Kingfisher.Source
}
public struct PropagationError {
  public let source: Kingfisher.Source
  public let error: Kingfisher.KingfisherError
}
public typealias DownloadTaskUpdatedBlock = ((_ newTask: Kingfisher.DownloadTask?) -> Swift.Void)
public class KingfisherManager {
  public static let shared: Kingfisher.KingfisherManager
  public var cache: Kingfisher.ImageCache
  public var downloader: Kingfisher.ImageDownloader
  public var defaultOptions: Kingfisher.KingfisherOptionsInfo
  public init(downloader: Kingfisher.ImageDownloader, cache: Kingfisher.ImageCache)
  @discardableResult
  public func retrieveImage(with resource: Kingfisher.Resource, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, downloadTaskUpdated: Kingfisher.DownloadTaskUpdatedBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)?) -> Kingfisher.DownloadTask?
  public func retrieveImage(with source: Kingfisher.Source, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, downloadTaskUpdated: Kingfisher.DownloadTaskUpdatedBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)?) -> Kingfisher.DownloadTask?
  @objc deinit
}
public protocol AsyncImageDownloadRequestModifier {
  func modified(for request: Foundation.URLRequest, reportModified: @escaping (Foundation.URLRequest?) -> Swift.Void)
  var onDownloadTaskStarted: ((Kingfisher.DownloadTask?) -> Swift.Void)? { get }
}
public protocol ImageDownloadRequestModifier : Kingfisher.AsyncImageDownloadRequestModifier {
  func modified(for request: Foundation.URLRequest) -> Foundation.URLRequest?
}
extension Kingfisher.ImageDownloadRequestModifier {
  public func modified(for request: Foundation.URLRequest, reportModified: @escaping (Foundation.URLRequest?) -> Swift.Void)
  public var onDownloadTaskStarted: ((Kingfisher.DownloadTask?) -> Swift.Void)? {
    get
  }
}
public struct AnyModifier : Kingfisher.ImageDownloadRequestModifier {
  public func modified(for request: Foundation.URLRequest) -> Foundation.URLRequest?
  public init(modify: @escaping (Foundation.URLRequest) -> Foundation.URLRequest?)
}
public typealias IndicatorView = UIKit.UIView
public enum IndicatorType {
  case none
  case activity
  case image(imageData: Foundation.Data)
  case custom(indicator: Kingfisher.Indicator)
}
public protocol Indicator {
  func startAnimatingView()
  func stopAnimatingView()
  var centerOffset: CoreGraphics.CGPoint { get }
  var view: Kingfisher.IndicatorView { get }
  func sizeStrategy(in imageView: Kingfisher.KFCrossPlatformImageView) -> Kingfisher.IndicatorSizeStrategy
}
public enum IndicatorSizeStrategy {
  case intrinsicSize
  case full
  case size(CoreGraphics.CGSize)
}
extension Kingfisher.Indicator {
  public var centerOffset: CoreGraphics.CGPoint {
    get
  }
  public func sizeStrategy(in imageView: Kingfisher.KFCrossPlatformImageView) -> Kingfisher.IndicatorSizeStrategy
}
public struct ImageLoadingResult {
  public let image: Kingfisher.KFCrossPlatformImage
  public let url: Foundation.URL?
  public let originalData: Foundation.Data
}
public struct DownloadTask {
  public let sessionTask: Kingfisher.SessionDataTask
  public let cancelToken: Kingfisher.SessionDataTask.CancelToken
  public func cancel()
}
open class ImageDownloader {
  public static let `default`: Kingfisher.ImageDownloader
  open var downloadTimeout: Swift.Double
  open var trustedHosts: Swift.Set<Swift.String>?
  open var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
    set
  }
  open var sessionDelegate: Kingfisher.SessionDelegate {
    get
    set
  }
  open var requestsUsePipelining: Swift.Bool
  weak open var delegate: Kingfisher.ImageDownloaderDelegate?
  weak open var authenticationChallengeResponder: Kingfisher.AuthenticationChallengeResponsible?
  public init(name: Swift.String)
  @objc deinit
  @discardableResult
  open func downloadImage(with url: Foundation.URL, options: Kingfisher.KingfisherParsedOptionsInfo, completionHandler: ((Swift.Result<Kingfisher.ImageLoadingResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  open func downloadImage(with url: Foundation.URL, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.ImageLoadingResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  open func downloadImage(with url: Foundation.URL, options: Kingfisher.KingfisherOptionsInfo? = nil, completionHandler: ((Swift.Result<Kingfisher.ImageLoadingResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
}
extension Kingfisher.ImageDownloader {
  public func cancelAll()
  public func cancel(url: Foundation.URL)
}
extension Kingfisher.ImageDownloader : Kingfisher.AuthenticationChallengeResponsible {
}
extension Kingfisher.ImageDownloader : Kingfisher.ImageDownloaderDelegate {
}
@_hasMissingDesignatedInitializers public class RetryContext {
  final public let source: Kingfisher.Source
  final public let error: Kingfisher.KingfisherError
  public var retriedCount: Swift.Int
  public var userInfo: Any? {
    get
  }
  @objc deinit
}
public enum RetryDecision {
  case retry(userInfo: Any?)
  case stop
}
public protocol RetryStrategy {
  func retry(context: Kingfisher.RetryContext, retryHandler: @escaping (Kingfisher.RetryDecision) -> Swift.Void)
}
public struct DelayRetryStrategy : Kingfisher.RetryStrategy {
  public enum Interval {
    case seconds(Foundation.TimeInterval)
    case accumulated(Foundation.TimeInterval)
    case custom(block: (_ retriedCount: Swift.Int) -> Foundation.TimeInterval)
  }
  public let maxRetryCount: Swift.Int
  public let retryInterval: Kingfisher.DelayRetryStrategy.Interval
  public init(maxRetryCount: Swift.Int, retryInterval: Kingfisher.DelayRetryStrategy.Interval = .seconds(3))
  public func retry(context: Kingfisher.RetryContext, retryHandler: @escaping (Kingfisher.RetryDecision) -> Swift.Void)
}
public enum ImageFormat {
  case unknown
  case PNG
  case JPEG
  case GIF
  public enum JPEGMarker {
    case SOF0
    case SOF2
    case DHT
    case DQT
    case DRI
    case SOS
    case RSTn(Swift.UInt8)
    case APPn
    case COM
    case EOI
  }
  public static func == (a: Kingfisher.ImageFormat, b: Kingfisher.ImageFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Data : Kingfisher.KingfisherCompatibleValue {
}
extension Kingfisher.KingfisherWrapper where Base == Foundation.Data {
  public var imageFormat: Kingfisher.ImageFormat {
    get
  }
  public func contains(jpeg marker: Kingfisher.ImageFormat.JPEGMarker) -> Swift.Bool
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.NSTextAttachment {
  @discardableResult
  public func setImage(with source: Kingfisher.Source?, attributedView: @autoclosure @escaping () -> Kingfisher.KFCrossPlatformView, placeholder: Kingfisher.KFCrossPlatformImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with resource: Kingfisher.Resource?, attributedView: @autoclosure @escaping () -> Kingfisher.KFCrossPlatformView, placeholder: Kingfisher.KFCrossPlatformImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  public func cancelDownloadTask()
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.NSTextAttachment {
  public var taskIdentifier: Kingfisher.Source.Identifier.Value? {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFImageProtocol {
  public static func source(_ source: Kingfisher.Source?) -> Self
  public static func resource(_ resource: Kingfisher.Resource?) -> Self
  public static func url(_ url: Foundation.URL?, cacheKey: Swift.String? = nil) -> Self
  public static func dataProvider(_ provider: Kingfisher.ImageDataProvider?) -> Self
  public static func data(_ data: Foundation.Data?, cacheKey: Swift.String) -> Self
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFImageProtocol {
  public func placeholder<P>(@SwiftUI.ViewBuilder _ content: @escaping (Foundation.Progress) -> P) -> Self where P : SwiftUI.View
  public func placeholder<P>(@SwiftUI.ViewBuilder _ content: @escaping () -> P) -> Self where P : SwiftUI.View
  public func cancelOnDisappear(_ flag: Swift.Bool) -> Self
  public func fade(duration: Foundation.TimeInterval) -> Self
}
extension Foundation.NSNotification.Name {
  public static let KingfisherDidCleanDiskCache: Foundation.Notification.Name
}
public let KingfisherDiskCacheCleanedHashKey: Swift.String
public enum CacheType {
  case none
  case memory
  case disk
  public var cached: Swift.Bool {
    get
  }
  public static func == (a: Kingfisher.CacheType, b: Kingfisher.CacheType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CacheStoreResult {
  public let memoryCacheResult: Swift.Result<(), Swift.Never>
  public let diskCacheResult: Swift.Result<(), Kingfisher.KingfisherError>
}
extension UIKit.UIImage : Kingfisher.CacheCostCalculable {
  public var cacheCost: Swift.Int {
    get
  }
}
extension Foundation.Data : Kingfisher.DataTransformable {
  public func toData() throws -> Foundation.Data
  public static func fromData(_ data: Foundation.Data) throws -> Foundation.Data
  public static let empty: Foundation.Data
}
public enum ImageCacheResult {
  case disk(Kingfisher.KFCrossPlatformImage)
  case memory(Kingfisher.KFCrossPlatformImage)
  case none
  public var image: Kingfisher.KFCrossPlatformImage? {
    get
  }
  public var cacheType: Kingfisher.CacheType {
    get
  }
}
open class ImageCache {
  public static let `default`: Kingfisher.ImageCache
  final public let memoryStorage: Kingfisher.MemoryStorage.Backend<Kingfisher.KFCrossPlatformImage>
  final public let diskStorage: Kingfisher.DiskStorage.Backend<Foundation.Data>
  public typealias DiskCachePathClosure = (Foundation.URL, Swift.String) -> Foundation.URL
  public init(memoryStorage: Kingfisher.MemoryStorage.Backend<Kingfisher.KFCrossPlatformImage>, diskStorage: Kingfisher.DiskStorage.Backend<Foundation.Data>)
  convenience public init(name: Swift.String)
  convenience public init(name: Swift.String, cacheDirectoryURL: Foundation.URL?, diskCachePathClosure: Kingfisher.ImageCache.DiskCachePathClosure? = nil) throws
  @objc deinit
  open func store(_ image: Kingfisher.KFCrossPlatformImage, original: Foundation.Data? = nil, forKey key: Swift.String, options: Kingfisher.KingfisherParsedOptionsInfo, toDisk: Swift.Bool = true, completionHandler: ((Kingfisher.CacheStoreResult) -> Swift.Void)? = nil)
  open func store(_ image: Kingfisher.KFCrossPlatformImage, original: Foundation.Data? = nil, forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", cacheSerializer serializer: Kingfisher.CacheSerializer = DefaultCacheSerializer.default, toDisk: Swift.Bool = true, callbackQueue: Kingfisher.CallbackQueue = .untouch, completionHandler: ((Kingfisher.CacheStoreResult) -> Swift.Void)? = nil)
  open func storeToDisk(_ data: Foundation.Data, forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", expiration: Kingfisher.StorageExpiration? = nil, callbackQueue: Kingfisher.CallbackQueue = .untouch, completionHandler: ((Kingfisher.CacheStoreResult) -> Swift.Void)? = nil)
  open func removeImage(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", fromMemory: Swift.Bool = true, fromDisk: Swift.Bool = true, callbackQueue: Kingfisher.CallbackQueue = .untouch, completionHandler: (() -> Swift.Void)? = nil)
  open func retrieveImage(forKey key: Swift.String, options: Kingfisher.KingfisherParsedOptionsInfo, callbackQueue: Kingfisher.CallbackQueue = .mainCurrentOrAsync, completionHandler: ((Swift.Result<Kingfisher.ImageCacheResult, Kingfisher.KingfisherError>) -> Swift.Void)?)
  open func retrieveImage(forKey key: Swift.String, options: Kingfisher.KingfisherOptionsInfo? = nil, callbackQueue: Kingfisher.CallbackQueue = .mainCurrentOrAsync, completionHandler: ((Swift.Result<Kingfisher.ImageCacheResult, Kingfisher.KingfisherError>) -> Swift.Void)?)
  open func retrieveImageInMemoryCache(forKey key: Swift.String, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
  open func retrieveImageInMemoryCache(forKey key: Swift.String, options: Kingfisher.KingfisherOptionsInfo? = nil) -> Kingfisher.KFCrossPlatformImage?
  open func retrieveImageInDiskCache(forKey key: Swift.String, options: Kingfisher.KingfisherOptionsInfo? = nil, callbackQueue: Kingfisher.CallbackQueue = .untouch, completionHandler: @escaping (Swift.Result<Kingfisher.KFCrossPlatformImage?, Kingfisher.KingfisherError>) -> Swift.Void)
  public func clearCache(completion handler: (() -> Swift.Void)? = nil)
  @objc public func clearMemoryCache()
  open func clearDiskCache(completion handler: (() -> Swift.Void)? = nil)
  open func cleanExpiredCache(completion handler: (() -> Swift.Void)? = nil)
  open func cleanExpiredMemoryCache()
  open func cleanExpiredDiskCache(completion handler: (() -> Swift.Void)? = nil)
  @objc public func backgroundCleanExpiredDiskCache()
  open func imageCachedType(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> Kingfisher.CacheType
  public func isCached(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> Swift.Bool
  open func hash(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> Swift.String
  open func calculateDiskStorageSize(completion handler: @escaping ((Swift.Result<Swift.UInt, Kingfisher.KingfisherError>) -> Swift.Void))
  open func cachePath(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> Swift.String
}
extension UIKit.UIApplication : Kingfisher.KingfisherCompatible {
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIApplication {
  public static var shared: UIKit.UIApplication? {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol KFImageProtocol : Kingfisher.KFOptionSetter, SwiftUI.View {
  associatedtype HoldingView : Kingfisher.KFImageHoldingView
  var context: Kingfisher.KFImage.Context<Self.HoldingView> { get set }
  init(context: Kingfisher.KFImage.Context<Self.HoldingView>)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFImageProtocol {
  public var body: some SwiftUI.View {
    get
  }
  public init(source: Kingfisher.Source?)
  public init(_ url: Foundation.URL?)
  public func configure(_ block: @escaping (Self.HoldingView) -> Self.HoldingView) -> Self
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol KFImageHoldingView : SwiftUI.View {
  associatedtype RenderingView
  static func created(from image: Kingfisher.KFCrossPlatformImage?, context: Kingfisher.KFImage.Context<Self>) -> Self
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Kingfisher.KFImageProtocol {
  public var options: Kingfisher.KingfisherParsedOptionsInfo {
    get
    nonmutating set
  }
  public var onFailureDelegate: Kingfisher.Delegate<Kingfisher.KingfisherError, Swift.Void> {
    get
  }
  public var onSuccessDelegate: Kingfisher.Delegate<Kingfisher.RetrieveImageResult, Swift.Void> {
    get
  }
  public var onProgressDelegate: Kingfisher.Delegate<(Swift.Int64, Swift.Int64), Swift.Void> {
    get
  }
  public var delegateObserver: Swift.AnyObject {
    get
  }
}
public typealias PrefetcherProgressBlock = ((_ skippedResources: [Kingfisher.Resource], _ failedResources: [Kingfisher.Resource], _ completedResources: [Kingfisher.Resource]) -> Swift.Void)
public typealias PrefetcherSourceProgressBlock = ((_ skippedSources: [Kingfisher.Source], _ failedSources: [Kingfisher.Source], _ completedSources: [Kingfisher.Source]) -> Swift.Void)
public typealias PrefetcherCompletionHandler = ((_ skippedResources: [Kingfisher.Resource], _ failedResources: [Kingfisher.Resource], _ completedResources: [Kingfisher.Resource]) -> Swift.Void)
public typealias PrefetcherSourceCompletionHandler = ((_ skippedSources: [Kingfisher.Source], _ failedSources: [Kingfisher.Source], _ completedSources: [Kingfisher.Source]) -> Swift.Void)
@_hasMissingDesignatedInitializers public class ImagePrefetcher : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var maxConcurrentDownloads: Swift.Int
  convenience public init(urls: [Foundation.URL], options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.PrefetcherProgressBlock? = nil, completionHandler: Kingfisher.PrefetcherCompletionHandler? = nil)
  convenience public init(urls: [Foundation.URL], options: Kingfisher.KingfisherOptionsInfo? = nil, completionHandler: Kingfisher.PrefetcherCompletionHandler? = nil)
  convenience public init(resources: [Kingfisher.Resource], options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.PrefetcherProgressBlock? = nil, completionHandler: Kingfisher.PrefetcherCompletionHandler? = nil)
  convenience public init(resources: [Kingfisher.Resource], options: Kingfisher.KingfisherOptionsInfo? = nil, completionHandler: Kingfisher.PrefetcherCompletionHandler? = nil)
  convenience public init(sources: [Kingfisher.Source], options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.PrefetcherSourceProgressBlock? = nil, completionHandler: Kingfisher.PrefetcherSourceCompletionHandler? = nil)
  convenience public init(sources: [Kingfisher.Source], options: Kingfisher.KingfisherOptionsInfo? = nil, completionHandler: Kingfisher.PrefetcherSourceCompletionHandler? = nil)
  public func start()
  public func stop()
  @objc deinit
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImageView {
  @discardableResult
  public func setImage(with source: Kingfisher.Source?, placeholder: Kingfisher.Placeholder? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with source: Kingfisher.Source?, placeholder: Kingfisher.Placeholder? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with resource: Kingfisher.Resource?, placeholder: Kingfisher.Placeholder? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with resource: Kingfisher.Resource?, placeholder: Kingfisher.Placeholder? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with provider: Kingfisher.ImageDataProvider?, placeholder: Kingfisher.Placeholder? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with provider: Kingfisher.ImageDataProvider?, placeholder: Kingfisher.Placeholder? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  public func cancelDownloadTask()
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImageView {
  public var taskIdentifier: Kingfisher.Source.Identifier.Value? {
    get
  }
  public var indicatorType: Kingfisher.IndicatorType {
    get
    set
  }
  public var indicator: Kingfisher.Indicator? {
    get
  }
  public var placeholder: Kingfisher.Placeholder? {
    get
  }
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIButton {
  @discardableResult
  public func setImage(with source: Kingfisher.Source?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with resource: Kingfisher.Resource?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with source: Kingfisher.Source?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, parsedOptions: Kingfisher.KingfisherParsedOptionsInfo, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  public func cancelImageDownloadTask()
  @discardableResult
  public func setBackgroundImage(with source: Kingfisher.Source?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setBackgroundImage(with resource: Kingfisher.Resource?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  public func cancelBackgroundImageDownloadTask()
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIButton {
  public func taskIdentifier(for state: UIKit.UIControl.State) -> Kingfisher.Source.Identifier.Value?
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIButton {
  public func backgroundTaskIdentifier(for state: UIKit.UIControl.State) -> Kingfisher.Source.Identifier.Value?
}
public struct ImageCreatingOptions {
  public let scale: CoreGraphics.CGFloat
  public let duration: Foundation.TimeInterval
  public let preloadAll: Swift.Bool
  public let onlyFirstFrame: Swift.Bool
  public init(scale: CoreGraphics.CGFloat = 1.0, duration: Foundation.TimeInterval = 0.0, preloadAll: Swift.Bool = false, onlyFirstFrame: Swift.Bool = false)
}
@_hasMissingDesignatedInitializers public class GIFAnimatedImage {
  public static func getFrameDuration(from gifInfo: [Swift.String : Any]?) -> Foundation.TimeInterval
  public static func getFrameDuration(from imageSource: ImageIO.CGImageSource, at index: Swift.Int) -> Foundation.TimeInterval
  @objc deinit
}
@available(iOS 14.0, *)
extension Kingfisher.KingfisherWrapper where Base : CarPlay.CPListItem {
  @discardableResult
  public func setImage(with source: Kingfisher.Source?, placeholder: Kingfisher.KFCrossPlatformImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  @discardableResult
  public func setImage(with resource: Kingfisher.Resource?, placeholder: Kingfisher.KFCrossPlatformImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: ((Swift.Result<Kingfisher.RetrieveImageResult, Kingfisher.KingfisherError>) -> Swift.Void)? = nil) -> Kingfisher.DownloadTask?
  public func cancelDownloadTask()
}
extension Kingfisher.KingfisherWrapper where Base : CarPlay.CPListItem {
  public var taskIdentifier: Kingfisher.Source.Identifier.Value? {
    get
  }
}
public enum Source {
  public enum Identifier {
    public typealias Value = Swift.UInt
  }
  case network(Kingfisher.Resource)
  case provider(Kingfisher.ImageDataProvider)
  public var cacheKey: Swift.String {
    get
  }
  public var url: Foundation.URL? {
    get
  }
}
extension Kingfisher.Source : Swift.Hashable {
  public static func == (lhs: Kingfisher.Source, rhs: Kingfisher.Source) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(KFSessionDelegate) open class SessionDelegate : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Kingfisher.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public typealias Transformer = (CoreImage.CIImage) -> CoreImage.CIImage?
public protocol CIImageProcessor : Kingfisher.ImageProcessor {
  var filter: Kingfisher.Filter { get }
}
extension Kingfisher.CIImageProcessor {
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
public struct Filter {
  public init(transform: @escaping Kingfisher.Transformer)
  public static var tint: (_ color: Kingfisher.KFCrossPlatformColor) -> Kingfisher.Filter
  public typealias ColorElement = (CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat)
  public static var colorControl: (_ arg: Kingfisher.Filter.ColorElement) -> Kingfisher.Filter
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImage {
  public func apply(_ filter: Kingfisher.Filter) -> Kingfisher.KFCrossPlatformImage
}
public protocol Resource {
  var cacheKey: Swift.String { get }
  var downloadURL: Foundation.URL { get }
}
extension Kingfisher.Resource {
  public func convertToSource(overrideCacheKey: Swift.String? = nil) -> Kingfisher.Source
}
public struct ImageResource : Kingfisher.Resource {
  public init(downloadURL: Foundation.URL, cacheKey: Swift.String? = nil)
  public let cacheKey: Swift.String
  public let downloadURL: Foundation.URL
}
extension Foundation.URL : Kingfisher.Resource {
  public var cacheKey: Swift.String {
    get
  }
  public var downloadURL: Foundation.URL {
    get
  }
}
public protocol ImageDownloadRedirectHandler {
  func handleHTTPRedirection(for task: Kingfisher.SessionDataTask, response: Foundation.HTTPURLResponse, newRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct AnyRedirectHandler : Kingfisher.ImageDownloadRedirectHandler {
  public func handleHTTPRedirection(for task: Kingfisher.SessionDataTask, response: Foundation.HTTPURLResponse, newRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  public init(handle: @escaping (Kingfisher.SessionDataTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct KFAnimatedImage : Kingfisher.KFImageProtocol {
  public typealias HoldingView = Kingfisher.KFAnimatedImageViewRepresenter
  public var context: Kingfisher.KFImage.Context<Kingfisher.KFAnimatedImage.HoldingView>
  public init(context: Kingfisher.KFImage.Context<Kingfisher.KFAnimatedImage.HoldingView>)
  public func configure(_ block: @escaping (Kingfisher.KFAnimatedImage.HoldingView.RenderingView) -> Swift.Void) -> Kingfisher.KFAnimatedImage
  public typealias Body = @_opaqueReturnTypeOf("$s10Kingfisher15KFImageProtocolPAAE4bodyQrvp", 0) __<Kingfisher.KFAnimatedImage>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor(unsafe) public struct KFAnimatedImageViewRepresenter : SwiftUI.UIViewRepresentable, Kingfisher.KFImageHoldingView {
  public typealias RenderingView = Kingfisher.AnimatedImageView
  @_Concurrency.MainActor(unsafe) public static func created(from image: Kingfisher.KFCrossPlatformImage?, context: Kingfisher.KFImage.Context<Kingfisher.KFAnimatedImageViewRepresenter>) -> Kingfisher.KFAnimatedImageViewRepresenter
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: Kingfisher.KFAnimatedImageViewRepresenter.Context) -> Kingfisher.AnimatedImageView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: Kingfisher.AnimatedImageView, context: Kingfisher.KFAnimatedImageViewRepresenter.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = Kingfisher.AnimatedImageView
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImage {
  public func image(withBlendMode blendMode: CoreGraphics.CGBlendMode, alpha: CoreGraphics.CGFloat = 1.0, backgroundColor: Kingfisher.KFCrossPlatformColor? = nil) -> Kingfisher.KFCrossPlatformImage
  public func image(withRadius radius: Kingfisher.Radius, fit size: CoreGraphics.CGSize, roundingCorners corners: Kingfisher.RectCorner = .all, backgroundColor: Kingfisher.KFCrossPlatformColor? = nil) -> Kingfisher.KFCrossPlatformImage
  public func image(withRoundRadius radius: CoreGraphics.CGFloat, fit size: CoreGraphics.CGSize, roundingCorners corners: Kingfisher.RectCorner = .all, backgroundColor: Kingfisher.KFCrossPlatformColor? = nil) -> Kingfisher.KFCrossPlatformImage
  public func resize(to size: CoreGraphics.CGSize) -> Kingfisher.KFCrossPlatformImage
  public func resize(to targetSize: CoreGraphics.CGSize, for contentMode: Kingfisher.ContentMode) -> Kingfisher.KFCrossPlatformImage
  public func crop(to size: CoreGraphics.CGSize, anchorOn anchor: CoreGraphics.CGPoint) -> Kingfisher.KFCrossPlatformImage
  public func blurred(withRadius radius: CoreGraphics.CGFloat) -> Kingfisher.KFCrossPlatformImage
  public func addingBorder(_ border: Kingfisher.Border) -> Kingfisher.KFCrossPlatformImage
  public func overlaying(with color: Kingfisher.KFCrossPlatformColor, fraction: CoreGraphics.CGFloat) -> Kingfisher.KFCrossPlatformImage
  public func tinted(with color: Kingfisher.KFCrossPlatformColor) -> Kingfisher.KFCrossPlatformImage
  public func adjusted(brightness: CoreGraphics.CGFloat, contrast: CoreGraphics.CGFloat, saturation: CoreGraphics.CGFloat, inputEV: CoreGraphics.CGFloat) -> Kingfisher.KFCrossPlatformImage
  public func scaled(to scale: CoreGraphics.CGFloat) -> Kingfisher.KFCrossPlatformImage
}
extension Kingfisher.KingfisherWrapper where Base : UIKit.UIImage {
  public var decoded: Kingfisher.KFCrossPlatformImage {
    get
  }
  public func decoded(scale: CoreGraphics.CGFloat) -> Kingfisher.KFCrossPlatformImage
  public func decoded(on context: CoreGraphics.CGContext) -> Kingfisher.KFCrossPlatformImage
}
@_hasMissingDesignatedInitializers public class SessionDataTask {
  public typealias CancelToken = Swift.Int
  public var mutableData: Foundation.Data {
    get
  }
  final public let originalURL: Foundation.URL?
  final public let task: Foundation.URLSessionDataTask
  @objc deinit
}
public enum KingfisherError : Swift.Error {
  public enum RequestErrorReason {
    case emptyRequest
    case invalidURL(request: Foundation.URLRequest)
    case taskCancelled(task: Kingfisher.SessionDataTask, token: Kingfisher.SessionDataTask.CancelToken)
  }
  public enum ResponseErrorReason {
    case invalidURLResponse(response: Foundation.URLResponse)
    case invalidHTTPStatusCode(response: Foundation.HTTPURLResponse)
    case URLSessionError(error: Swift.Error)
    case dataModifyingFailed(task: Kingfisher.SessionDataTask)
    case noURLResponse(task: Kingfisher.SessionDataTask)
  }
  public enum CacheErrorReason {
    case fileEnumeratorCreationFailed(url: Foundation.URL)
    case invalidFileEnumeratorContent(url: Foundation.URL)
    case invalidURLResource(error: Swift.Error, key: Swift.String, url: Foundation.URL)
    case cannotLoadDataFromDisk(url: Foundation.URL, error: Swift.Error)
    case cannotCreateDirectory(path: Swift.String, error: Swift.Error)
    case imageNotExisting(key: Swift.String)
    case cannotConvertToData(object: Any, error: Swift.Error)
    case cannotSerializeImage(image: Kingfisher.KFCrossPlatformImage?, original: Foundation.Data?, serializer: Kingfisher.CacheSerializer)
    case cannotCreateCacheFile(fileURL: Foundation.URL, key: Swift.String, data: Foundation.Data, error: Swift.Error)
    case cannotSetCacheFileAttribute(filePath: Swift.String, attributes: [Foundation.FileAttributeKey : Any], error: Swift.Error)
    case diskStorageIsNotReady(cacheURL: Foundation.URL)
  }
  public enum ProcessorErrorReason {
    case processingFailed(processor: Kingfisher.ImageProcessor, item: Kingfisher.ImageProcessItem)
  }
  public enum ImageSettingErrorReason {
    case emptySource
    case notCurrentSourceTask(result: Kingfisher.RetrieveImageResult?, error: Swift.Error?, source: Kingfisher.Source)
    case dataProviderError(provider: Kingfisher.ImageDataProvider, error: Swift.Error)
    case alternativeSourcesExhausted([Kingfisher.PropagationError])
  }
  case requestError(reason: Kingfisher.KingfisherError.RequestErrorReason)
  case responseError(reason: Kingfisher.KingfisherError.ResponseErrorReason)
  case cacheError(reason: Kingfisher.KingfisherError.CacheErrorReason)
  case processorError(reason: Kingfisher.KingfisherError.ProcessorErrorReason)
  case imageSettingError(reason: Kingfisher.KingfisherError.ImageSettingErrorReason)
  public var isTaskCancelled: Swift.Bool {
    get
  }
  public func isInvalidResponseStatusCode(_ code: Swift.Int) -> Swift.Bool
  public var isInvalidResponseStatusCode: Swift.Bool {
    get
  }
  public var isNotCurrentTask: Swift.Bool {
    get
  }
}
extension Kingfisher.KingfisherError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Kingfisher.KingfisherError : Foundation.CustomNSError {
  public static let domain: Swift.String
  public var errorCode: Swift.Int {
    get
  }
}
@available(*, deprecated, renamed: "AuthenticationChallengeResponsible", message: "Typo. Use `AuthenticationChallengeResponsible` instead")
public typealias AuthenticationChallengeResponsable = Kingfisher.AuthenticationChallengeResponsible
public protocol AuthenticationChallengeResponsible : AnyObject {
  func downloader(_ downloader: Kingfisher.ImageDownloader, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  func downloader(_ downloader: Kingfisher.ImageDownloader, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
extension Kingfisher.AuthenticationChallengeResponsible {
  public func downloader(_ downloader: Kingfisher.ImageDownloader, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  public func downloader(_ downloader: Kingfisher.ImageDownloader, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
public typealias KingfisherOptionsInfo = [Kingfisher.KingfisherOptionsInfoItem]
public enum KingfisherOptionsInfoItem {
  case targetCache(Kingfisher.ImageCache)
  case originalCache(Kingfisher.ImageCache)
  case downloader(Kingfisher.ImageDownloader)
  case transition(Kingfisher.ImageTransition)
  case downloadPriority(Swift.Float)
  case forceRefresh
  case fromMemoryCacheOrRefresh
  case forceTransition
  case cacheMemoryOnly
  case waitForCache
  case onlyFromCache
  case backgroundDecode
  case callbackQueue(Kingfisher.CallbackQueue)
  case scaleFactor(CoreGraphics.CGFloat)
  case preloadAllAnimationData
  case requestModifier(Kingfisher.AsyncImageDownloadRequestModifier)
  case redirectHandler(Kingfisher.ImageDownloadRedirectHandler)
  case processor(Kingfisher.ImageProcessor)
  case cacheSerializer(Kingfisher.CacheSerializer)
  case imageModifier(Kingfisher.ImageModifier)
  case keepCurrentImageWhileLoading
  case onlyLoadFirstFrame
  case cacheOriginalImage
  case onFailureImage(Kingfisher.KFCrossPlatformImage?)
  case alsoPrefetchToMemory
  case loadDiskFileSynchronously
  case diskStoreWriteOptions(Foundation.Data.WritingOptions)
  case memoryCacheExpiration(Kingfisher.StorageExpiration)
  case memoryCacheAccessExtendingExpiration(Kingfisher.ExpirationExtending)
  case diskCacheExpiration(Kingfisher.StorageExpiration)
  case diskCacheAccessExtendingExpiration(Kingfisher.ExpirationExtending)
  case processingQueue(Kingfisher.CallbackQueue)
  case progressiveJPEG(Kingfisher.ImageProgressive)
  case alternativeSources([Kingfisher.Source])
  case retryStrategy(Kingfisher.RetryStrategy)
  case lowDataMode(Kingfisher.Source?)
}
public struct KingfisherParsedOptionsInfo {
  public var targetCache: Kingfisher.ImageCache?
  public var originalCache: Kingfisher.ImageCache?
  public var downloader: Kingfisher.ImageDownloader?
  public var transition: Kingfisher.ImageTransition
  public var downloadPriority: Swift.Float
  public var forceRefresh: Swift.Bool
  public var fromMemoryCacheOrRefresh: Swift.Bool
  public var forceTransition: Swift.Bool
  public var cacheMemoryOnly: Swift.Bool
  public var waitForCache: Swift.Bool
  public var onlyFromCache: Swift.Bool
  public var backgroundDecode: Swift.Bool
  public var preloadAllAnimationData: Swift.Bool
  public var callbackQueue: Kingfisher.CallbackQueue
  public var scaleFactor: CoreGraphics.CGFloat
  public var requestModifier: Kingfisher.AsyncImageDownloadRequestModifier?
  public var redirectHandler: Kingfisher.ImageDownloadRedirectHandler?
  public var processor: Kingfisher.ImageProcessor
  public var imageModifier: Kingfisher.ImageModifier?
  public var cacheSerializer: Kingfisher.CacheSerializer
  public var keepCurrentImageWhileLoading: Swift.Bool
  public var onlyLoadFirstFrame: Swift.Bool
  public var cacheOriginalImage: Swift.Bool
  public var onFailureImage: Kingfisher.KFCrossPlatformImage??
  public var alsoPrefetchToMemory: Swift.Bool
  public var loadDiskFileSynchronously: Swift.Bool
  public var diskStoreWriteOptions: Foundation.Data.WritingOptions
  public var memoryCacheExpiration: Kingfisher.StorageExpiration?
  public var memoryCacheAccessExtendingExpiration: Kingfisher.ExpirationExtending
  public var diskCacheExpiration: Kingfisher.StorageExpiration?
  public var diskCacheAccessExtendingExpiration: Kingfisher.ExpirationExtending
  public var processingQueue: Kingfisher.CallbackQueue?
  public var progressiveJPEG: Kingfisher.ImageProgressive?
  public var alternativeSources: [Kingfisher.Source]?
  public var retryStrategy: Kingfisher.RetryStrategy?
  public var lowDataModeSource: Kingfisher.Source?
  public init(_ info: Kingfisher.KingfisherOptionsInfo?)
}
extension Kingfisher.ContentMode : Swift.Equatable {}
extension Kingfisher.ContentMode : Swift.Hashable {}
extension Kingfisher.ImageFormat : Swift.Equatable {}
extension Kingfisher.ImageFormat : Swift.Hashable {}
extension Kingfisher.CacheType : Swift.Equatable {}
extension Kingfisher.CacheType : Swift.Hashable {}
