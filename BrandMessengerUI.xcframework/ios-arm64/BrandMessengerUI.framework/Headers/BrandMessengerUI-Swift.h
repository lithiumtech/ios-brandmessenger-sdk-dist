// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef BRANDMESSENGERUI_SWIFT_H
#define BRANDMESSENGERUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import BrandMessengerCore;
@import ContactsUI;
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
@import UserNotifications;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BrandMessengerUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC16BrandMessengerUI17AudioRecordButton")
@interface AudioRecordButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class AVAudioRecorder;

@interface AudioRecordButton (SWIFT_EXTENSION(BrandMessengerUI)) <AVAudioRecorderDelegate>
- (void)audioRecorderDidFinishRecording:(AVAudioRecorder * _Nonnull)_ successfully:(BOOL)flag;
@end


/// An autocomplete manager that is used for registering prefixes,
/// finding prefixes in user text and showing autocomplete suggestions.
SWIFT_CLASS("_TtC16BrandMessengerUI19AutoCompleteManager")
@interface AutoCompleteManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITextView;
@class NSString;

@interface AutoCompleteManager (SWIFT_EXTENSION(BrandMessengerUI)) <UITextViewDelegate>
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface AutoCompleteManager (SWIFT_EXTENSION(BrandMessengerUI)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)_ didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class NSError;
@class UIViewController;
@class KBMConversationProxy;
@class NSMutableDictionary;
@class KBMUser;
@class UIApplication;
@class NSData;
@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;
@class KBMRegistrationResponse;
@protocol KBMAuthenticationDelegate;
@protocol KBMJWTAuthenticationDelegate;
@protocol KBMConversationDelegate;
@protocol KBMEncryptionDelegate;
@class NSURL;
@class NSMutableArray;

SWIFT_CLASS("_TtC16BrandMessengerUI21BrandMessengerManager")
@interface BrandMessengerManager : NSObject
- (nonnull instancetype)initWithCompanyKey:(NSString * _Nonnull)companyKey applicationKey:(NSString * _Nonnull)applicationKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCompanyKey:(NSString * _Nonnull)companyKey applicationKey:(NSString * _Nullable)applicationKey widgetId:(NSString * _Nullable)widgetId completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion OBJC_DESIGNATED_INITIALIZER;
+ (void)updateToken;
+ (BOOL)isUserPresent SWIFT_WARN_UNUSED_RESULT;
+ (void)logoutUserWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Use this method for launching conversation list screen.
/// \param viewController Pass the UIViewController.
///
+ (void)launchChatListFrom:(UIViewController * _Nonnull)viewController;
/// Use this method for launching 1-to-1 chat conversation.
/// \param contactId Pass userId of whom for conversation needs to be launched.
///
/// \param viewController Pass the UIViewController.
///
/// \param prefilledMessage Pass the prefilled Message in case if this needs to prefilled in chat box else it will be nil.
///
+ (void)launchChatWithContactId:(NSString * _Nonnull)contactId from:(UIViewController * _Nonnull)viewController prefilledMessage:(NSString * _Nullable)prefilledMessage;
/// Use this method to launch the group chat conversation.
/// \param clientGroupId Pass the clientGroupId for launching Group/Channel conversation.
///
/// \param viewController Pass the UIViewController.
///
/// \param prefilledMessage Pass the prefilled Message in case if this needs to prefilled in chat box else it will be nil.
///
+ (void)launchGroupWithClientGroupId:(NSString * _Nonnull)clientGroupId from:(UIViewController * _Nonnull)viewController prefilledMessage:(NSString * _Nullable)prefilledMessage;
/// Use <a href="x-source-tag://GroupOfTwo">launchGroupOfTwo</a> method instead.
+ (void)launchChatWithConversationProxy:(KBMConversationProxy * _Nonnull)conversationProxy from:(UIViewController * _Nonnull)viewController;
/// Use this to launch context based Group of two.
/// <ul>
///   <li>
///     Usage:
///   </li>
/// </ul>
/// let metadata = NSMutableDictionary()
/// metadata[“title”] = “<ITEM_TITLE>”
/// metadata[“price”] = “<ITEM_PRICE>”
/// metadata[“link”] = “<IMAGE_URL>”
/// metadata[“KBM_CONTEXT_BASED_CHAT”] = “true”
/// launchGroupOfTwo(with: “<RECEIVER_USER_ID>”, metadata: metadata, topic: “<UNIQUE_TOPIC_ID>”, from: self)
/// \param userId UserId of the user with whom you want to start conversation.
///
/// \param metadata Dictionary that contains details about contextual chat.
///
/// \param topic A unique topic to identify conversation.
///
/// \param viewController ViewController from where chat will be pushed
///
+ (void)launchGroupOfTwoWith:(NSString * _Nonnull)userId metadata:(NSMutableDictionary * _Nonnull)metadata topic:(NSString * _Nonnull)topic from:(UIViewController * _Nonnull)viewController;
/// A convenient method to get logged-in user’s information.
/// If user information is stored in DB or preference, Code to get user’s information should go here.
/// This can also be used to get existing user information in case of app update.
///
/// returns:
/// Logged-in user information
+ (KBMUser * _Nonnull)getLoggedInUserInfo SWIFT_WARN_UNUSED_RESULT;
/// This method is used for updating APN’s device token to Messenger server.
/// \param application Pass the UIApplication object.
///
/// \param deviceToken Pass the device token data.
///
+ (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Use this method in AppDelegate didFinishLaunchingWithOptions for register totification and data connection handlers.
/// \param application Pass UIApplication object.
///
/// \param launchOptions Pass the Launch Options Key.
///
///
/// returns:
/// True for the didFinishLaunchingWithOptions setup.
+ (void)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)_;
/// Use this method in AppDelegate applicationWillEnterForeground to reset the unread badge count in App.
/// \param application Pass the UIApplication object.
///
+ (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
/// Use this method in AppDelegate applicationWillTerminate to save the context of the database.
/// \param application Pass the UIApplication object.
///
+ (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
/// Use this method for proccessing the notificiation of background.
/// \param application Pass UIApplication object.
///
/// \param userInfo Pass the userInfo dictionary of notification.
///
/// \param completionHandler Use the completionHandler UIBackgroundFetchResult and pass it to didReceiveRemoteNotification completion.
///
+ (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Use this method for proccessing local notification data of UNUserNotificationCenter.
/// \param center Pass UNUserNotificationCenter object.
///
/// \param notification Pass the UNNotificationResponse object.
///
/// \param completionHandler Completion Handler call back will have UNNotificationPresentationOptions if notification is proccessed it will be empty else it will have other options.
///
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresent:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// Use this method for proccessing User Notification Center response in didReceive method of UNUserNotificationCenter.
/// \param center Pass UNUserNotificationCenter object.
///
/// \param response Pass the UNNotificationResponse object.
///
/// \param completionHandler Completion Handler call back will be called after proccessing notification.
///
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceive:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Use this method for register notification.
+ (void)registerForNotification;
/// Returns latest synced unread count from server
/// There are other ‘getTotalUnreadCount’ methods, they are NOT the same.
+ (void)getTotalUnreadCountWithComplete:(void (^ _Nonnull)(NSUInteger, NSError * _Nullable))complete;
/// Login using access-token.
/// PRE-NEW-AUTH BACKEND IMPLEMENTATION: Currently using debug tokens.
+ (void)login:(NSString * _Nonnull)accessToken completion:(void (^ _Nonnull)(KBMRegistrationResponse * _Nullable, NSError * _Nullable))completion;
/// Login using access-token.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     accessToken: Pass your user accessToken to log in.
///   </li>
///   <li>
///     mergeConversations: Pass <code>true</code> to merge conversation from anonymous user to the authenticated user otherwise, <code>false</code> to ignore mergeing conversations and will do login to chat.
///   </li>
///   <li>
///     completion: Completion handler will have KBMRegistrationResponse in case of successful login otherwise it will have Error info from pre-auth or log-in.
///   </li>
/// </ul>
+ (void)login:(NSString * _Nonnull)accessToken mergeConversations:(BOOL)mergeConversations completion:(void (^ _Nonnull)(KBMRegistrationResponse * _Nullable, NSError * _Nullable))completion;
/// Login using JWT.
+ (void)loginWithJWT:(NSString * _Nonnull)jwt userId:(NSString * _Nonnull)userId completion:(void (^ _Nonnull)(KBMRegistrationResponse * _Nullable, NSError * _Nullable))completion;
/// Login using JWT.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     jwt: Client/Server generated JWT.
///   </li>
///   <li>
///     userId: User id for which jwt was generated.
///   </li>
///   <li>
///     mergeConversations: Pass <code>true</code> to merge conversation from the anonymous user to the authenticated user otherwise, <code>false</code> to ignore merging conversations and will do login to chat.
///   </li>
///   <li>
///     completion: Completion handler will have KBMRegistrationResponse in case of successful login otherwise it will have Error info from pre-auth or log-in.
///   </li>
/// </ul>
+ (void)loginWithJWT:(NSString * _Nonnull)jwt userId:(NSString * _Nonnull)userId mergeConversations:(BOOL)mergeConversations completion:(void (^ _Nonnull)(KBMRegistrationResponse * _Nullable, NSError * _Nullable))completion;
/// Login anonymous user.
+ (void)loginAnonymousUserWithCompletion:(void (^ _Nonnull)(KBMRegistrationResponse * _Nullable, NSError * _Nullable))completion;
/// Start conversation with default agent
/// \param viewController Provide a viewcontroller to present conversation from. If not provided, the sdk will try to find the top viewcontroller of UIApplication.shared.keyWindow?.rootViewController and present from there. If none can be found, this func does nothing.
///
+ (void)show:(UIViewController * _Nullable)viewController;
/// Start conversation with default agent
/// <ul>
///   <li>
///     completion: If an error is a nil the chat successfully launched, otherwise an error describing the details
///   </li>
/// </ul>
/// \param viewController Provide a viewcontroller to present conversation from. If not provided, the sdk will try to find the top viewcontroller of UIApplication.shared.keyWindow?.rootViewController and present from there. If none can be found, this func does nothing.
///
+ (void)show:(UIViewController * _Nullable)viewController completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Start conversation with default agent and make a welcome-message request API call.
/// \param viewController Provide a viewcontroller to present conversation from. If not provided, the sdk will try to find the top viewcontroller of UIApplication.shared.keyWindow?.rootViewController and present from there. If none can be found, this func does nothing.
///
+ (void)showWithWelcome:(UIViewController * _Nullable)viewController;
/// Start conversation with default agent and make a welcome-message request API call.
/// <ul>
///   <li>
///     completion: If an error is a nil the chat successfully launched, otherwise an error describing the details
///   </li>
/// </ul>
/// \param viewController Provide a viewcontroller to present conversation from. If not provided, the sdk will try to find the top viewcontroller of UIApplication.shared.keyWindow?.rootViewController and present from there. If none can be found, this func does nothing.
///
+ (void)showWithWelcome:(UIViewController * _Nullable)viewController completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Get default Agent Id
+ (NSString * _Nonnull)getDefaultAgentId SWIFT_WARN_UNUSED_RESULT;
/// convenience to set authenticationdelegate.
+ (void)setAuthenticationDelegate:(id <KBMAuthenticationDelegate> _Nonnull)del;
/// convenience to set JWT authenticationdelegate.
+ (void)setJWTAuthenticationDelegate:(id <KBMJWTAuthenticationDelegate> _Nonnull)del;
+ (void)isAuthenticatedWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Call to check if logged-in user has any open conversation.
/// \param completion Check for error is nil and then use the <code>hasOpenConversation</code> flag to identify the user has open conversations.
///
+ (void)hasOpenConversationWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Call to check Anonymous User has expired or not.
///
/// returns:
/// Returns <code>true</code> if Anonymous user expired otherwise, false.
+ (BOOL)isAnonymousUserExpired SWIFT_WARN_UNUSED_RESULT;
/// Call to set region. Determines the domains this app connects to.
/// \param region US or APAC. Default when not set is APAC.
///
+ (void)setRegion:(NSString * _Nonnull)region;
+ (void)useDebugUser:(BOOL)use;
/// Call from appDelegate before calling application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?)
/// Using will make onAppDidBecomeActive NOT proactivelyConnectMQTT or syncMessages
+ (void)doNotAutosubscribeOnLaunch:(BOOL)use;
/// Call to set KBMConversationDelegate, which allows adding/overriding metadata onto outgoing messages.
+ (void)setConversationDelegate:(id <KBMConversationDelegate> _Nonnull)delegate;
/// Call to set KBMEncryiptionDelegate, allowing application to handle encryption and storage of auth-token and password.
+ (void)setEncryptionDelegate:(id <KBMEncryptionDelegate> _Nonnull)delegate;
/// Make a welcome-message request API call
+ (void)sendWelcomeMessageRequestWithComplete:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable))complete;
/// Enable certificate pinning with array of public keys.
+ (void)setPinningCertificatePublicKeys:(NSArray<NSString *> * _Nonnull)keys;
/// Enable certificate pinning with array der certificate URLs.
+ (void)setPinningCertificates:(NSArray<NSURL *> * _Nonnull)certificates;
/// Enable default certificate pinning on default baseUrl ‘brandmessenger.khoros.com’
/// TODO: Need to get more backup keys.
+ (void)enableDefaultCertificatePinning;
/// Call to set the Widget Id
/// \param widgetId To get the WidgetId, you can create a new Widget configuration or select existing Widget in Settings –> Admin  –> Brand Messenger –> Modern Chat
/// Click on the “</> Script” button, and you will get the script which is used for the Web.  You can find the widgetId in that script
///
+ (void)setWidgetId:(NSString * _Nonnull)widgetId;
/// Call to  know all Display Conditions from Chat Widget configuration are met.
/// \param completion Check for error is nil and then use the <code>hasAllDisplayConditionsMet</code> flag to check all the Widget display conditions are met.
///
+ (void)isAllDisplayConditionsMetWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Call to get all Display Conditions from Chat Widget configuration.
/// \param completion Will have Array of <code>KBMDisplayCondition</code> object or error in case of any error during API call.
///
+ (void)getAllDisplayConditionsWithCompletion:(void (^ _Nonnull)(NSMutableArray * _Nullable, NSError * _Nullable))completion;
/// Call to know the chat Widget hash is enabled or not in Agent care console.
/// \param completion Check for error is nil and then use the <code>isWidgetHashEnabled</code> flag to check Widget hash enabled or not.
///
+ (void)isWidgetHashEnabledWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Dismiss the conversation view controller
/// Recursively dismiss the view controllers which are on top of <code>KBMConversationViewController</code>, if presenting ViewController is <code>KBMBaseNavigationViewController</code>.
+ (void)dismiss;
/// Call to know if the device IP address or country code is white-listed or black-listed in the care agent console.
/// \param completion Check for error is nil and then use the <code>isDeviceGeoIPAllowed</code> flag to check IP address or country code is white-listed or black-listed.
///
+ (void)isDeviceGeoIPAllowedWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Call to know if should chat needs to be throttled.
/// \param completion Check for the error is nil and then use the <code>shouldThrottle</code> flag to check if Throttling is applied.
///
+ (void)shouldThrottleWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC16BrandMessengerUI35ConversationListTableViewDataSource")
@interface ConversationListTableViewDataSource : NSObject <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16BrandMessengerUI15CustomSearchBar")
@interface CustomSearchBar : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI23DefaultAutoCompleteCell")
@interface DefaultAutoCompleteCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI10InsetLabel")
@interface InsetLabel : UILabel
- (void)drawTextInRect:(CGRect)rect;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC16BrandMessengerUI30KBMAccountSuspensionController")
@interface KBMAccountSuspensionController : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Custom ActivityIndicator view which will present a white large styled UIActivityIndicator
/// on top a rectangular background.
SWIFT_CLASS("_TtC16BrandMessengerUI20KBMActivityIndicator")
@interface KBMActivityIndicator : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <code>KBMAppSettings</code>class is used for creating a app settings details
SWIFT_CLASS("_TtC16BrandMessengerUI14KBMAppSettings")
@interface KBMAppSettings : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI20KBMAudioRecorderView")
@interface KBMAudioRecorderView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)userDidStartRecording;
- (void)userDidStopRecording;
- (BOOL)isRecordingTimeSufficient SWIFT_WARN_UNUSED_RESULT;
- (void)moveViewWithLocation:(CGPoint)location;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI31KBMBaseNavigationViewController")
@interface KBMBaseNavigationViewController : UINavigationController
- (void)viewDidLoad;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI21KBMBaseViewController")
@interface KBMBaseViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16BrandMessengerUI10KBMChatBar")
@interface KBMChatBar : UIView
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end




@interface KBMChatBar (SWIFT_EXTENSION(BrandMessengerUI)) <UITextViewDelegate>
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
@end

@class UIResponder;
@class NSAttributedString;
@class NSTextContainer;

SWIFT_CLASS("_TtC16BrandMessengerUI18KBMChatBarTextView")
@interface KBMChatBarTextView : UITextView
@property (nonatomic, readonly, strong) UIResponder * _Nullable nextResponder;
- (BOOL)canPerformAction:(SEL _Nonnull)action withSender:(id _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Null_unspecified text;
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
@property (nonatomic, strong) id <UITextViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface KBMChatBarTextView (SWIFT_EXTENSION(BrandMessengerUI)) <UITextViewDelegate>
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI11KBMChatCell")
@interface KBMChatCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)setEditing:(BOOL)editing animated:(BOOL)animated;
@end



SWIFT_CLASS("_TtC16BrandMessengerUI19KBMContextTitleView")
@interface KBMContextTitleView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI25KBMConversationHeaderView")
@interface KBMConversationHeaderView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The <code>ConversationListTableViewController</code> manages rendering of chat cells using the viewModel supplied to it. It also contains delegate to send callbacks when a cell is tapped.
/// It uses KBMChatCell and EmptyChatCell as tableview cell and handles the swipe interaction of user with the chat cell.
SWIFT_CLASS("_TtC16BrandMessengerUI38KBMConversationListTableViewController")
@interface KBMConversationListTableViewController : UITableViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)tableView:(UITableView * _Nonnull)_ canEditRowAtIndexPath:(NSIndexPath * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)_ didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)_ viewForHeaderInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)_ heightForHeaderInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)_ viewForFooterInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)_ heightForFooterInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIScrollView;

@interface KBMConversationListTableViewController (SWIFT_EXTENSION(BrandMessengerUI))
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


@class UISwipeActionsConfiguration;

@interface KBMConversationListTableViewController (SWIFT_EXTENSION(BrandMessengerUI))
- (UITableViewCellEditingStyle)tableView:(UITableView * _Nonnull)tableView editingStyleForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UISwipeActionsConfiguration * _Nullable)tableView:(UITableView * _Nonnull)tableView leadingSwipeActionsConfigurationForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UISwipeActionsConfiguration * _Nullable)tableView:(UITableView * _Nonnull)tableView trailingSwipeActionsConfigurationForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UISearchController;
@class UISearchBar;

@interface KBMConversationListTableViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UISearchBarDelegate, UISearchResultsUpdating>
- (void)updateSearchResultsForSearchController:(UISearchController * _Nonnull)searchController;
- (void)searchBar:(UISearchBar * _Nonnull)_ textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)_;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)_;
@end



SWIFT_CLASS("_TtC16BrandMessengerUI33KBMConversationListViewController")
@interface KBMConversationListViewController : KBMBaseViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@end


@interface KBMConversationListViewController (SWIFT_EXTENSION(BrandMessengerUI)) <KBMMessagesDelegate>
- (void)getMessagesArray:(NSMutableArray * _Null_unspecified)messagesArray;
- (void)updateMessageList:(NSMutableArray * _Null_unspecified)messagesArray;
@end



@interface KBMConversationListViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UISearchBarDelegate>
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)searchBar:(UISearchBar * _Nonnull)_ textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)_;
@end


@class KBMMessage;
@class KBMUserDetail;

@interface KBMConversationListViewController (SWIFT_EXTENSION(BrandMessengerUI)) <KBMMQTTConversationDelegate>
- (void)mqttDidConnected;
- (void)updateUserDetail:(NSString * _Nonnull)userId;
- (void)syncCall:(KBMMessage * _Nonnull)message andMessageList:(NSMutableArray * _Nullable)_;
- (void)updateMessageText:(NSString * _Nonnull)text withMessageKey:(NSString * _Nonnull)messageKey;
- (void)delivered:(NSString * _Nonnull)messageKey contactId:(NSString * _Nullable)contactId withStatus:(int32_t)status;
- (void)updateStatusForContact:(NSString * _Nonnull)contactId withStatus:(int32_t)status;
- (void)updateTypingStatus:(NSString * _Nonnull)_ userId:(NSString * _Nonnull)userId status:(BOOL)status;
- (void)reloadDataForUserBlockNotification:(NSString * _Nonnull)userId andBlockFlag:(BOOL)_;
- (void)updateLastSeenAtStatus:(KBMUserDetail * _Nonnull)userDetail;
- (void)mqttConnectionClosed;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI28KBMConversationListViewModel")
@interface KBMConversationListViewModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI21KBMConversationNavBar")
@interface KBMConversationNavBar : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSNotification;
@class NSTimer;

SWIFT_CLASS("_TtC16BrandMessengerUI29KBMConversationViewController")
@interface KBMConversationViewController : KBMBaseViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)pushNotificationWithNotification:(NSNotification * _Nonnull)notification;
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)_;
- (void)invalidateTimerAndUpdateHeightConstraint:(NSTimer * _Nullable)_;
@end


@class CNContactPickerViewController;
@class CNContact;

@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <CNContactPickerDelegate>
- (void)contactPicker:(CNContactPickerViewController * _Nonnull)_ didSelectContact:(CNContact * _Nonnull)contact;
@end









@class CLLocationManager;
@class CLLocation;

@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP16BrandMessengerUI22NavigationBarCallbacks_")
@protocol NavigationBarCallbacks
- (void)titleTapped;
@end


@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <NavigationBarCallbacks>
- (void)titleTapped;
@end

@class UIImagePickerController;

@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end


@class UICollectionView;
@class UICollectionViewCell;
@class UICollectionViewLayout;

@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)_ sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <KBMAttachmentDelegate>
- (void)onUpdateBytesUploaded:(int64_t)bytesSent withTotalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend withMessage:(KBMMessage * _Nonnull)message;
- (void)onUpdateBytesDownloaded:(int64_t)bytesReceived withMessage:(KBMMessage * _Nonnull)message;
- (void)onUploadFailed:(KBMMessage * _Nonnull)message;
- (void)onDownloadFailed:(KBMMessage * _Nonnull)message;
- (void)onUploadCompleted:(KBMMessage * _Nonnull)updatedMessage withOldMessageKey:(NSString * _Nonnull)oldMessageKey;
- (void)onDownloadCompleted:(KBMMessage * _Nonnull)updatedMessage;
@end



@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <KBMMQTTConversationDelegate>
- (void)updateMessageText:(NSString * _Nonnull)text withMessageKey:(NSString * _Nonnull)messageKey;
- (void)mqttDidConnected;
- (void)syncCall:(KBMMessage * _Nonnull)message andMessageList:(NSMutableArray * _Nullable)_;
- (void)delivered:(NSString * _Nonnull)messageKey contactId:(NSString * _Nullable)contactId withStatus:(int32_t)status;
- (void)updateStatusForContact:(NSString * _Nonnull)contactId withStatus:(int32_t)status;
- (void)updateTypingStatus:(NSString * _Nonnull)_ userId:(NSString * _Nonnull)userId status:(BOOL)status;
- (void)updateLastSeenAtStatus:(KBMUserDetail * _Nonnull)userDetail;
- (void)mqttConnectionClosed;
- (void)reloadDataForUserBlockNotification:(NSString * _Nonnull)_ andBlockFlag:(BOOL)_;
- (void)updateUserDetail:(NSString * _Nonnull)userId;
@end


@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)_ heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)_ estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)_ heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)_ viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)_ willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)_ willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)_;
- (void)scrollViewDidScrollToTop:(UIScrollView * _Nonnull)_;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface KBMConversationViewController (SWIFT_EXTENSION(BrandMessengerUI))
- (void)loadingStarted;
- (void)loadingFinishedWithError:(NSError * _Nullable)_;
- (void)deleteQuickReplyMessageWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)newMessagesAdded;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI24KBMConversationViewModel")
@interface KBMConversationViewModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16BrandMessengerUI18KBMGenericCardCell")
@interface KBMGenericCardCell : UICollectionViewCell
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16BrandMessengerUI24KBMIndexedCollectionView")
@interface KBMIndexedCollectionView : UICollectionView
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI28KBMGenericCardCollectionView")
@interface KBMGenericCardCollectionView : KBMIndexedCollectionView
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16BrandMessengerUI19KBMLoadingIndicator")
@interface KBMLoadingIndicator : UIStackView
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface KBMMessage (SWIFT_EXTENSION(BrandMessengerUI))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end







SWIFT_CLASS("_TtC16BrandMessengerUI24KBMNewChatViewController")
@interface KBMNewChatViewController : KBMBaseViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
@end



@interface KBMNewChatViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UIScrollViewDelegate>
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


@interface KBMNewChatViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UISearchBarDelegate>
- (void)searchBar:(UISearchBar * _Nonnull)_ textDidChange:(NSString * _Nonnull)searchText;
@end


@interface KBMNewChatViewController (SWIFT_EXTENSION(BrandMessengerUI)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)_ viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)_ heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI25KBMPinnedSystemHeaderView")
@interface KBMPinnedSystemHeaderView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI19KBMReplyMessageView")
@interface KBMReplyMessageView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI29KBMSearchResultViewController")
@interface KBMSearchResultViewController : KBMBaseViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
@end



SWIFT_CLASS("_TtC16BrandMessengerUI22KBMTemplateMessageCell")
@interface KBMTemplateMessageCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI23KBMTemplateMessageModel")
@interface KBMTemplateMessageModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC16BrandMessengerUI23KBMTemplateMessagesView")
@interface KBMTemplateMessagesView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface KBMTemplateMessagesView (SWIFT_EXTENSION(BrandMessengerUI)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)_ numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)_ didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)_ layout:(UICollectionViewLayout * _Nonnull)_ sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16BrandMessengerUI28KBMTemplateMessagesViewModel")
@interface KBMTemplateMessagesViewModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class WKWebView;
@class WKNavigation;

SWIFT_CLASS("_TtC16BrandMessengerUI20KBMWebViewController")
@interface KBMWebViewController : KBMBaseViewController <WKNavigationDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webview didFailNavigation:(WKNavigation * _Null_unspecified)_ withError:(NSError * _Nonnull)_;
- (void)webView:(WKWebView * _Nonnull)webview didFinishNavigation:(WKNavigation * _Null_unspecified)_;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class WKUserContentController;
@class WKScriptMessage;

@interface KBMWebViewController (SWIFT_EXTENSION(BrandMessengerUI)) <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end

enum KDCircularProgressGlowMode : NSInteger;
@class UIColor;
@class CAAnimation;

IB_DESIGNABLE
SWIFT_CLASS("_TtC16BrandMessengerUI18KDCircularProgress")
@interface KDCircularProgress : UIView <CAAnimationDelegate>
@property (nonatomic) double progress;
@property (nonatomic) IBInspectable double angle;
@property (nonatomic) IBInspectable double startAngle;
@property (nonatomic) IBInspectable BOOL clockwise;
@property (nonatomic) IBInspectable BOOL roundedCorners;
@property (nonatomic) IBInspectable BOOL lerpColorMode;
@property (nonatomic) IBInspectable CGFloat gradientRotateSpeed;
@property (nonatomic) IBInspectable CGFloat glowAmount;
@property (nonatomic) enum KDCircularProgressGlowMode glowMode;
@property (nonatomic) IBInspectable CGFloat progressThickness;
@property (nonatomic) IBInspectable CGFloat trackThickness;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull trackColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable progressInsideFillColor;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull progressColors;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)animateFromAngle:(double)fromAngle toAngle:(double)toAngle duration:(NSTimeInterval)duration relativeDuration:(BOOL)relativeDuration completion:(void (^ _Nullable)(BOOL))completion;
- (void)animateToAngle:(double)toAngle duration:(NSTimeInterval)duration relativeDuration:(BOOL)relativeDuration completion:(void (^ _Nullable)(BOOL))completion;
- (void)pauseAnimation;
- (void)stopAnimation;
- (BOOL)isAnimating SWIFT_WARN_UNUSED_RESULT;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
- (void)didMoveToWindow;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)prepareForInterfaceBuilder;
@end

typedef SWIFT_ENUM(NSInteger, KDCircularProgressGlowMode, open) {
  KDCircularProgressGlowModeForward = 0,
  KDCircularProgressGlowModeReverse = 1,
  KDCircularProgressGlowModeConstant = 2,
  KDCircularProgressGlowModeNoGlow = 3,
};








IB_DESIGNABLE
SWIFT_CLASS("_TtC16BrandMessengerUI15TranslucentView")
@interface TranslucentView : UIView
@property (nonatomic) IBInspectable BOOL translucent;
@property (nonatomic) IBInspectable CGFloat translucentAlpha;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull translucentTintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TranslucentView (SWIFT_EXTENSION(BrandMessengerUI))
@property (nonatomic) CGRect frame;
@property (nonatomic) CGRect bounds;
@property (nonatomic, strong) UIColor * _Null_unspecified backgroundColor;
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull subviews;
- (void)sendSubviewToBack:(UIView * _Nonnull)view;
- (void)insertSubview:(UIView * _Nonnull)view atIndex:(NSInteger)index;
- (void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2;
@end





































SWIFT_CLASS("_TtC16BrandMessengerUI18VerticalAlignLabel")
@interface VerticalAlignLabel : UILabel
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)limitedToNumberOfLines SWIFT_WARN_UNUSED_RESULT;
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
