// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BrandMessengerUI
import AVFoundation
import AVKit
import BrandMessengerCore
@_exported import BrandMessengerUI
import Contacts
import ContactsUI
import CoreLocation
import Foundation
import Kingfisher
import MapKit
import MobileCoreServices
import Photos
import PhotosUI
import RichMessageKit
import SafariServices
import Swift
import SwipeCellKit
import UIKit
import WebKit
import _Concurrency
extension BrandMessengerUI.KBMMessageStyle {
  public typealias MessageStatusType = RichMessageKit.KBMMessageStatus
  public enum StatusIcon {
    case templateImageWithTint(image: UIKit.UIImage, tintColor: UIKit.UIColor)
    case normalImage(image: UIKit.UIImage)
    case none
  }
  public struct SentMessageStatus {
    public mutating func set(icon: BrandMessengerUI.KBMMessageStyle.StatusIcon, for type: BrandMessengerUI.KBMMessageStyle.MessageStatusType)
  }
}
extension BrandMessengerUI.KBMConversationViewController : BrandMessengerUI.NavigationBarCallbacks {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func titleTapped()
}
public protocol KBMConversationListDelegate : AnyObject {
  func conversation(_ message: BrandMessengerUI.KBMChatViewModelProtocol, willSelectItemAt index: Swift.Int, viewController: BrandMessengerUI.KBMConversationListViewController)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMConversationListViewController : BrandMessengerUI.KBMBaseViewController {
  @_Concurrency.MainActor(unsafe) public var conversationViewController: BrandMessengerUI.KBMConversationViewController?
  @_Concurrency.MainActor(unsafe) public var conversationViewModelType: BrandMessengerUI.KBMConversationViewModel.Type
  @_Concurrency.MainActor(unsafe) weak public var delegate: BrandMessengerUI.KBMConversationListDelegate?
  @_Concurrency.MainActor(unsafe) public var conversationListTableViewController: BrandMessengerUI.KBMConversationListTableViewController
  @_Concurrency.MainActor(unsafe) required public init(configuration: BrandMessengerUI.KBMConfiguration)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func addObserver()
  @_Concurrency.MainActor(unsafe) override open func removeObserver()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func showAccountSuspensionView()
}
extension BrandMessengerUI.KBMConversationListViewController : BrandMessengerCore.KBMMessagesDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getMessagesArray(_ messagesArray: Foundation.NSMutableArray!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateMessageList(_ messagesArray: Foundation.NSMutableArray!)
}
extension BrandMessengerUI.KBMConversationListViewController : BrandMessengerUI.KBMConversationListViewModelDelegate {
  @_Concurrency.MainActor(unsafe) open func startedLoading()
  @_Concurrency.MainActor(unsafe) open func listUpdated()
  @_Concurrency.MainActor(unsafe) open func rowUpdatedAt(position: Swift.Int)
}
extension BrandMessengerUI.KBMConversationListViewController : BrandMessengerCore.KBMMQTTConversationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mqttDidConnected()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateUserDetail(_ userId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func syncCall(_ message: BrandMessengerCore.KBMMessage, andMessageList _: Foundation.NSMutableArray?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func delivered(_ messageKey: Swift.String, contactId: Swift.String?, withStatus status: Swift.Int32)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateStatus(forContact contactId: Swift.String, withStatus status: Swift.Int32)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateTypingStatus(_: Swift.String, userId: Swift.String, status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func reloadData(forUserBlockNotification userId: Swift.String, andBlockFlag _: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateLastSeen(atStatus userDetail: BrandMessengerCore.KBMUserDetail)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mqttConnectionClosed()
}
extension BrandMessengerUI.KBMConversationListViewController : BrandMessengerUI.KBMConversationListTableViewDelegate {
  @_Concurrency.MainActor(unsafe) public func tapped(_ chat: BrandMessengerUI.KBMChatViewModelProtocol, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func emptyChatCellTapped()
  @_Concurrency.MainActor(unsafe) public func scrolledToBottom()
  @_Concurrency.MainActor(unsafe) public func userBlockNotification(userId: Swift.String, isBlocked: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func muteNotification(conversation: BrandMessengerCore.KBMMessage, isMuted: Swift.Bool)
}
extension BrandMessengerUI.KBMConversationListViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarCancelButtonClicked(_: UIKit.UISearchBar)
}
extension BrandMessengerCore.KBMMessage : BrandMessengerUI.KBMChatViewModelProtocol {
  public var avatar: Foundation.URL? {
    get
  }
  public var avatarImage: UIKit.UIImage? {
    get
  }
  public var avatarGroupImageUrl: Swift.String? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var groupName: Swift.String {
    get
  }
  public var theLastMessage: Swift.String? {
    get
  }
  public var hasUnreadMessages: Swift.Bool {
    get
  }
  public var totalNumberOfUnreadMessages: Swift.UInt {
    get
  }
  public var isGroupChat: Swift.Bool {
    get
  }
  public var contactId: Swift.String? {
    get
  }
  public var channelKey: Foundation.NSNumber? {
    get
  }
  public var createdAt: Swift.String? {
    get
  }
  public var channelType: Swift.Int16 {
    get
  }
  public var isMessageEmpty: Swift.Bool {
    get
  }
  public var messageMetadata: Foundation.NSMutableDictionary? {
    get
  }
}
extension BrandMessengerCore.KBMMessage {
  public var messageType: BrandMessengerUI.KBMMessageType {
    get
  }
}
extension BrandMessengerCore.KBMMessage {
  public var messageModel: BrandMessengerUI.KBMMessageModel {
    get
  }
}
extension BrandMessengerCore.KBMMessage {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMLoadingIndicator : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, color: UIKit.UIColor = .black)
  @_Concurrency.MainActor(unsafe) public func startLoading(localizationFileName: Swift.String)
  @_Concurrency.MainActor(unsafe) public func stopLoading()
  @_Concurrency.MainActor(unsafe) public func set(_ color: UIKit.UIColor)
  @objc deinit
}
@objc open class KBMTemplateMessagesViewModel : ObjectiveC.NSObject {
  open var messageTemplates: [BrandMessengerUI.KBMTemplateMessageModel]
  public var leftRightPadding: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var textFont: UIKit.UIFont
  public init(messageTemplates: [BrandMessengerUI.KBMTemplateMessageModel])
  open func getNumberOfItemsIn(section _: Swift.Int) -> Swift.Int
  open func getTextForItemAt(row: Swift.Int) -> Swift.String?
  open func getSizeForItemAt(row: Swift.Int) -> CoreGraphics.CGSize
  open func getTemplateForItemAt(row: Swift.Int) -> BrandMessengerUI.KBMTemplateMessageModel?
  open func updateLast(message _: BrandMessengerCore.KBMMessage)
  @objc deinit
}
public enum KBMNotification {
  public static let createGroupAction: Swift.String
  public static let conversationListAction: Swift.String
}
public struct AutoCompleteItem {
  public let key: Swift.String
  public let content: Swift.String
  public let displayImageURL: Foundation.URL?
  public init(key: Swift.String, content: Swift.String, displayImageURL: Foundation.URL? = nil)
}
extension BrandMessengerUI.AutoCompleteItem {
  public static let attributesKey: Foundation.NSAttributedString.Key
}
public struct AutoCompleteItemConfiguration {
  public var addSpaceAfterInserting: Swift.Bool
  public var insertWithPrefix: Swift.Bool
  public var allowEditingAutocompleteText: Swift.Bool
  public var textStyle: RichMessageKit.Style?
  public init()
}
extension BrandMessengerUI.AutoCompleteItemConfiguration {
  public static var memberMention: BrandMessengerUI.AutoCompleteItemConfiguration {
    get
  }
}
public protocol KBMConfigurable {
  var configuration: BrandMessengerUI.KBMConfiguration! { get }
  init(configuration: BrandMessengerUI.KBMConfiguration)
}
public protocol KBMMessageCellDelegate : AnyObject {
  func urlTapped(url: Foundation.URL, message: BrandMessengerUI.KBMMessageViewModel)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMMessageCell : BrandMessengerUI.KBMChatBaseCell<BrandMessengerUI.KBMMessageViewModel> {
  @objc deinit
}
extension BrandMessengerUI.KBMMessageCell : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in _: Foundation.NSRange, interaction _: UIKit.UITextItemInteraction) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMMyMessageButtonCell : BrandMessengerUI.KBMChatBaseCell<BrandMessengerUI.KBMMessageViewModel> {
  @_Concurrency.MainActor(unsafe) open func update(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) open class func rowHeigh(viewModel: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class KBMNewChatViewController : BrandMessengerUI.KBMBaseViewController {
  @_Concurrency.MainActor(unsafe) convenience public init(configuration: BrandMessengerUI.KBMConfiguration, viewModel: BrandMessengerUI.KBMNewChatViewModel)
  @_Concurrency.MainActor(unsafe) required public init(configuration: BrandMessengerUI.KBMConfiguration)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension BrandMessengerUI.KBMNewChatViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func numberOfSections(in _: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
}
extension BrandMessengerUI.KBMNewChatViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension BrandMessengerUI.KBMNewChatViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func searchBar(_: UIKit.UISearchBar, textDidChange searchText: Swift.String)
}
public class UploadTask {
  public var completed: Swift.Bool
  public var fileName: Swift.String?
  public var contentType: Swift.String?
  public var uploadError: Swift.Error?
  public var filePath: Swift.String?
  public var thumbnailPath: Swift.String?
  public var identifier: Swift.String?
  public init(url: Foundation.URL, fileName: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMMyMessageQuickReplyCell : BrandMessengerUI.KBMChatBaseCell<BrandMessengerUI.KBMMessageViewModel> {
  @_Concurrency.MainActor(unsafe) public func update(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func rowHeight(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMChatBarTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var next: UIKit.UIResponder? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var delegate: UIKit.UITextViewDelegate? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BrandMessengerUI.KBMChatBarTextView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
final public class KBMNewChatViewModel {
  public init(localizedStringFileName: Swift.String)
  @objc deinit
}
public enum KBMVoiceCellState {
  case playing
  case stop
  case pause
  public static func == (a: BrandMessengerUI.KBMVoiceCellState, b: BrandMessengerUI.KBMVoiceCellState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct KBMNavigationItem {
  public static let NSNotificationForConversationViewNavigationTap: Swift.String
  public static let NSNotificationForConversationListNavigationTap: Swift.String
  public let identifier: Swift.Int
  public let buttonText: Swift.String?
  public let buttonImage: UIKit.UIImage?
}
extension BrandMessengerUI.KBMNavigationItem {
  public init(identifier: Swift.Int, text: Swift.String)
  public init(identifier: Swift.Int, icon: UIKit.UIImage)
}
extension BrandMessengerUI.KBMNavigationItem {
  public func barButton(target: Any, action: ObjectiveC.Selector) -> UIKit.UIBarButtonItem?
}
@objc open class KBMTemplateMessageModel : ObjectiveC.NSObject {
  open var identifier: Swift.String
  open var text: Swift.String
  open var messageToSend: Swift.String?
  open var showInAllCases: Swift.Bool
  open var onlyShowWhenLastMessageIsText: Swift.Bool
  open var onlyShowWhenLastMessageIsImage: Swift.Bool
  open var onlyShowWhenLastMessageIsVideo: Swift.Bool
  open var sendMessageOnSelection: Swift.Bool
  public init(identifier: Swift.String, text: Swift.String)
  @objc deinit
}
extension BrandMessengerUI.KBMTemplateMessageModel {
  convenience public init?(json: [Swift.String : Any])
}
extension BrandMessengerCore.KBMContact : BrandMessengerUI.KBMContactProtocol {
  public var friendUUID: Swift.String? {
    get
  }
  public var friendDisplayImgURL: Foundation.URL? {
    get
  }
  public var friendProfileName: Swift.String? {
    get
  }
  public var friendMood: Swift.String? {
    get
  }
}
public protocol KBMAudioRecorderViewProtocol : AnyObject {
  func cancelAudioRecording()
}
@objc @_Concurrency.MainActor(unsafe) open class KBMAudioRecorderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, configuration: BrandMessengerUI.KBMConfiguration)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func userDidStartRecording()
  @objc @_Concurrency.MainActor(unsafe) public func userDidStopRecording()
  @objc @_Concurrency.MainActor(unsafe) public func isRecordingTimeSufficient() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func moveView(location: CoreGraphics.CGPoint)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMSearchResultViewController : BrandMessengerUI.KBMBaseViewController {
  @_Concurrency.MainActor(unsafe) required public init(configuration: BrandMessengerUI.KBMConfiguration)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func search(key: Swift.String)
  @_Concurrency.MainActor(unsafe) public func clear()
  @_Concurrency.MainActor(unsafe) public func clearAndReload()
  @_Concurrency.MainActor(unsafe) public func setUpSearchViewController() -> UIKit.UISearchController
  @objc deinit
}
extension BrandMessengerUI.KBMSearchResultViewController : BrandMessengerUI.KBMConversationListTableViewDelegate {
  @_Concurrency.MainActor(unsafe) public func muteNotification(conversation _: BrandMessengerCore.KBMMessage, isMuted _: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func userBlockNotification(userId _: Swift.String, isBlocked _: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func tapped(_ chat: BrandMessengerUI.KBMChatViewModelProtocol, at _: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func emptyChatCellTapped()
  @_Concurrency.MainActor(unsafe) public func scrolledToBottom()
}
public protocol KBMConversationViewModelDelegate : AnyObject {
  func loadingStarted()
  func loadingFinished(error: Swift.Error?)
  func messageUpdated()
  func updateMessageAt(indexPath: Foundation.IndexPath)
  func newMessagesAdded()
  func messageSent(at: Foundation.IndexPath)
  func updateDisplay(contact: BrandMessengerCore.KBMContact?, channel: BrandMessengerCore.KBMChannel?)
  func willSendMessage()
  func updateTyingStatus(status: Swift.Bool, userId: Swift.String)
}
@objc open class KBMConversationViewModel : ObjectiveC.NSObject {
  open var contactId: Swift.String? {
    get
    set
  }
  open var channelKey: Foundation.NSNumber? {
    get
    set
  }
  open var isSearch: Swift.Bool
  open var conversationProxy: BrandMessengerCore.KBMConversationProxy? {
    get
    set
  }
  weak public var delegate: BrandMessengerUI.KBMConversationViewModelDelegate?
  open var isFirstTime: Swift.Bool
  open var isGroup: Swift.Bool {
    get
  }
  open var prefilledMessage: Swift.String?
  open var isContextBasedChat: Swift.Bool {
    get
  }
  open var messageModels: [BrandMessengerUI.KBMMessageModel]
  open var richMessages: [Swift.String : Any]
  open var isOpenGroup: Swift.Bool {
    get
  }
  required public init(contactId: Swift.String?, channelKey: Foundation.NSNumber?, conversationProxy: BrandMessengerCore.KBMConversationProxy? = nil, localizedStringFileName: Swift.String!, prefilledMessage: Swift.String? = nil)
  public func prepareController()
  public func addToWrapper(message: BrandMessengerCore.KBMMessage)
  open func groupProfileImgUrl() -> Swift.String
  open func groupName() -> Swift.String
  open func groupKey() -> Foundation.NSNumber?
  open func friends() -> [BrandMessengerUI.KBMFriendViewModel]
  open func numberOfSections() -> Swift.Int
  open func numberOfRows(section _: Swift.Int) -> Swift.Int
  open func messageForRow(indexPath: Foundation.IndexPath) -> BrandMessengerUI.KBMMessageViewModel?
  open func quickReplyDictionary(message: BrandMessengerUI.KBMMessageViewModel?, indexRow row: Swift.Int) -> [Swift.String : Any]?
  open func getSizeForItemAt(row _: Swift.Int, withData: [Swift.String : Any]) -> CoreGraphics.CGSize
  open func messageForRow(identifier: Swift.String) -> BrandMessengerUI.KBMMessageViewModel?
  open func heightForRow(indexPath: Foundation.IndexPath, cellFrame _: CoreGraphics.CGRect, configuration: BrandMessengerUI.KBMConfiguration) -> CoreGraphics.CGFloat
  open func nextPage()
  open func getContextTitleData() -> BrandMessengerUI.KBMContextTitleDataType?
  open func getMessageTemplates() -> [BrandMessengerUI.KBMTemplateMessageModel]?
  open func downloadAttachment(message: BrandMessengerUI.KBMMessageViewModel, view: UIKit.UIView)
  open func addMessagesToList(_ messageList: [Any])
  open func markConversationRead()
  open func updateGroup(groupName: Swift.String, groupImage: Swift.String?, friendsAdded: [BrandMessengerUI.KBMFriendViewModel])
  open func updateDeliveryReport(messageKey: Swift.String, status: Swift.Int32)
  open func updateStatusReportForConversation(contactId: Swift.String, status: Swift.Int32)
  open func updateSendStatus(message: BrandMessengerCore.KBMMessage)
  open func send(messageText: Swift.String, isOpenGroup: Swift.Bool = false, metadata: [Swift.AnyHashable : Any]?)
  open func send(photo: UIKit.UIImage, metadata: [Swift.AnyHashable : Any]?) -> (BrandMessengerCore.KBMMessage?, Foundation.IndexPath?)
  open func send(contact: Contacts.CNContact, metadata: [Swift.AnyHashable : Any]?)
  open func send(voiceMessage: Foundation.Data, metadata: [Swift.AnyHashable : Any]?)
  open func add(geocode: BrandMessengerUI.Geocode, metadata: [Swift.AnyHashable : Any]?) -> (BrandMessengerCore.KBMMessage?, Foundation.IndexPath?)
  open func sendGeocode(message: BrandMessengerCore.KBMMessage, indexPath: Foundation.IndexPath)
  open func sendVideo(atPath path: Swift.String, sourceType: UIKit.UIImagePickerController.SourceType, metadata: [Swift.AnyHashable : Any]?) -> (BrandMessengerCore.KBMMessage?, Foundation.IndexPath?)
  open func uploadVideo(view: UIKit.UIView, indexPath: Foundation.IndexPath)
  open func uploadAttachmentCompleted(responseDict: Any?, indexPath: Foundation.IndexPath)
  open func updateMessageModelAt(indexPath: Foundation.IndexPath, data: Foundation.Data)
  open func sendKeyboardBeginTyping()
  open func sendKeyboardDoneTyping()
  open func refresh()
  open func uploadAudio(message: BrandMessengerCore.KBMMessage, indexPath: Foundation.IndexPath)
  open func uploadImage(view: UIKit.UIView, indexPath: Foundation.IndexPath)
  open func encodeVideo(videoURL: Foundation.URL, completion: @escaping (_ path: Swift.String?) -> Swift.Void)
  open func selected(template: BrandMessengerUI.KBMTemplateMessageModel, metadata: [Swift.AnyHashable : Any]?)
  open func setSelectedMessageToReply(_ message: BrandMessengerUI.KBMMessageViewModel)
  open func getSelectedMessageToReply() -> BrandMessengerUI.KBMMessageViewModel?
  open func clearSelectedMessageToReply()
  open func getIndexpathFor(message: BrandMessengerUI.KBMMessageModel) -> Foundation.IndexPath?
  open func showPoweredByMessage() -> Swift.Bool
  open func loadOpenGroupMessages()
  @objc deinit
}
public protocol KBMAudioRecorderProtocol : AnyObject {
  func moveButton(location: CoreGraphics.CGPoint)
  func finishRecordingAudio(soundData: Foundation.NSData)
  func startRecordingAudio()
  func cancelRecordingAudio()
  func permissionNotGrant()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AudioRecordButton : UIKit.UIButton {
  public enum KBMSoundRecorderState {
    case recording
    case none
    public static func == (a: BrandMessengerUI.AudioRecordButton.KBMSoundRecorderState, b: BrandMessengerUI.AudioRecordButton.KBMSoundRecorderState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var states: BrandMessengerUI.AudioRecordButton.KBMSoundRecorderState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
extension BrandMessengerUI.AudioRecordButton : AVFAudio.AVAudioRecorderDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioRecorderDidFinishRecording(_: AVFAudio.AVAudioRecorder, successfully flag: Swift.Bool)
}
public struct FAQTemplate : Swift.Codable {
  public let title: Swift.String?
  public let description: Swift.String?
  public let buttonLabel: Swift.String?
  public let buttons: [BrandMessengerUI.FAQTemplate.Button]?
  public struct Button : Swift.Codable {
    public let name: Swift.String
    public let type: Swift.String?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KBMAccountSuspensionController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var closePressed: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BrandMessengerUI.KBMConversationViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
public enum Font {
  case ultraLight(size: CoreGraphics.CGFloat)
  case ultraLightItalic(size: CoreGraphics.CGFloat)
  case thin(size: CoreGraphics.CGFloat)
  case thinItalic(size: CoreGraphics.CGFloat)
  case light(size: CoreGraphics.CGFloat)
  case lightItalic(size: CoreGraphics.CGFloat)
  case medium(size: CoreGraphics.CGFloat)
  case mediumItalic(size: CoreGraphics.CGFloat)
  case normal(size: CoreGraphics.CGFloat)
  case italic(size: CoreGraphics.CGFloat)
  case bold(size: CoreGraphics.CGFloat)
  case boldItalic(size: CoreGraphics.CGFloat)
  case condensedBlack(size: CoreGraphics.CGFloat)
  case condensedBold(size: CoreGraphics.CGFloat)
  public func font() -> UIKit.UIFont
}
public enum Color {
  public enum Text : Swift.Int64 {
    case white
    case main
    case redC0
    case grayCC
    case gray9B
    case grayC1
    case gray66
    case gray99
    case blueFF
    case black00
    case grayD4
    case gray7E
    public init?(rawValue: Swift.Int64)
    public typealias RawValue = Swift.Int64
    public var rawValue: Swift.Int64 {
      get
    }
  }
  public enum Background : Swift.Int64 {
    case none
    case white
    case main
    case redC0
    case gray9B
    case grayF2
    case grayEF
    case grayC1
    case gray99
    case grayEC
    case grayCC
    case gray66
    case grayF1
    public init?(rawValue: Swift.Int64)
    public typealias RawValue = Swift.Int64
    public var rawValue: Swift.Int64 {
      get
    }
  }
  public enum Border : Swift.Int64 {
    case main
    case redC0
    case white
    case black
    case gray9B
    case grayF2
    case grayEF
    case grayC1
    case gray99
    public init?(rawValue: Swift.Int64)
    public typealias RawValue = Swift.Int64
    public var rawValue: Swift.Int64 {
      get
    }
  }
}
extension UIKit.UIFont {
  public static func font(_ font: BrandMessengerUI.Font) -> UIKit.UIFont
}
extension UIKit.UIColor {
  public static func text(_ color: BrandMessengerUI.Color.Text) -> UIKit.UIColor
  public static func background(_ color: BrandMessengerUI.Color.Background) -> UIKit.UIColor
  public static func border(_ color: BrandMessengerUI.Color.Border) -> UIKit.UIColor
  public static func color(_ color: BrandMessengerUI.Color.Text) -> UIKit.UIColor
  public static func color(_ color: BrandMessengerUI.Color.Background) -> UIKit.UIColor
  public static func color(_ color: BrandMessengerUI.Color.Border) -> UIKit.UIColor
}
@objc @_Concurrency.MainActor(unsafe) open class KBMChatBar : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var chatBarConfiguration: BrandMessengerUI.KBMChatBarConfiguration {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isMicButtonHidden: Swift.Bool!
  public enum ButtonMode {
    case send
    case media
    public static func == (a: BrandMessengerUI.KBMChatBar.ButtonMode, b: BrandMessengerUI.KBMChatBar.ButtonMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ActionType {
    case sendText(UIKit.UIButton, Foundation.NSAttributedString)
    case chatBarTextBeginEdit
    case chatBarTextChange(UIKit.UIButton)
    case sendVoice(Foundation.NSData)
    case startVideoRecord
    case startVoiceRecord
    case showImagePicker
    case showLocation
    case noVoiceRecordPermission
    case mic(UIKit.UIButton)
    case more(UIKit.UIButton)
    case cameraButtonClicked(UIKit.UIButton)
    case shareContact
    case showDocumentPicker
  }
  @_Concurrency.MainActor(unsafe) public var action: ((BrandMessengerUI.KBMChatBar.ActionType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var autocompletionView: UIKit.UITableView!
  @_Concurrency.MainActor(unsafe) open var soundRec: BrandMessengerUI.KBMAudioRecorderView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var headerView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var headerViewHeight: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let textView: BrandMessengerUI.KBMChatBarTextView
  @_Concurrency.MainActor(unsafe) open var frameView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) open var grayView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var placeHolder: UIKit.UITextView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var micButton: BrandMessengerUI.AudioRecordButton
  @_Concurrency.MainActor(unsafe) open var photoButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var galleryButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var plusButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var locationButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var contactButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var documentButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var lineImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) open var sendButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var lineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var bottomGrayView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var videoButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var isTextViewFirstResponder: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open func clear()
  @_Concurrency.MainActor(unsafe) required public init(frame: CoreGraphics.CGRect, configuration: BrandMessengerUI.KBMConfiguration)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func showPoweredByMessage()
  @_Concurrency.MainActor(unsafe) public func updateMediaViewVisibility(hide: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func disableSendButton(isSendButtonDisabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func addTextView(delegate: UIKit.UITextViewDelegate)
}
extension BrandMessengerUI.KBMChatBar : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidEndEditing(_ textView: UIKit.UITextView)
}
extension BrandMessengerUI.KBMChatBar : BrandMessengerUI.KBMAudioRecorderProtocol {
  @_Concurrency.MainActor(unsafe) public func startRecordingAudio()
  @_Concurrency.MainActor(unsafe) public func finishRecordingAudio(soundData: Foundation.NSData)
  @_Concurrency.MainActor(unsafe) public func cancelRecordingAudio()
  @_Concurrency.MainActor(unsafe) public func permissionNotGrant()
  @_Concurrency.MainActor(unsafe) public func moveButton(location: CoreGraphics.CGPoint)
}
extension BrandMessengerUI.KBMChatBar : BrandMessengerUI.KBMAudioRecorderViewProtocol {
  @_Concurrency.MainActor(unsafe) public func cancelAudioRecording()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMActivityIndicator : UIKit.UIView {
  public struct Size {
    public let width: CoreGraphics.CGFloat
    public let height: CoreGraphics.CGFloat
    public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, backgroundColor: UIKit.UIColor, indicatorColor: UIKit.UIColor, size: BrandMessengerUI.KBMActivityIndicator.Size)
  @_Concurrency.MainActor(unsafe) public func startAnimating()
  @_Concurrency.MainActor(unsafe) public func stopAnimating()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMBaseViewController : UIKit.UIViewController, BrandMessengerUI.KBMConfigurable {
  @_Concurrency.MainActor(unsafe) public var configuration: BrandMessengerUI.KBMConfiguration!
  @_Concurrency.MainActor(unsafe) required public init(configuration: BrandMessengerUI.KBMConfiguration)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func addObserver()
  @_Concurrency.MainActor(unsafe) open func removeObserver()
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func showAccountSuspensionView()
}
public protocol KBMContactProtocol {
  var friendUUID: Swift.String? { get }
  var friendMood: Swift.String? { get }
  var friendProfileName: Swift.String? { get }
  var friendDisplayImgURL: Foundation.URL? { get }
}
@_hasMissingDesignatedInitializers open class KBMFriendViewModel {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMFriendMessageCell : BrandMessengerUI.KBMMessageCell {
  @objc deinit
}
public protocol AutoCompletionDelegate : AnyObject {
  func didMatch(prefix: Swift.String, message: Swift.String)
}
public protocol AutoCompletionItemCell : UIKit.UITableViewCell {
  func updateView(item: BrandMessengerUI.AutoCompleteItem)
}
@objc public class AutoCompleteManager : ObjectiveC.NSObject {
  final public let autocompletionView: UIKit.UITableView
  final public let textView: BrandMessengerUI.KBMChatBarTextView
  weak public var autocompletionDelegate: BrandMessengerUI.AutoCompletionDelegate?
  public var items: [BrandMessengerUI.AutoCompleteItem]
  public init(textView: BrandMessengerUI.KBMChatBarTextView, tableview: UIKit.UITableView)
  public func registerPrefix<T>(prefix: Swift.String, configuration: BrandMessengerUI.AutoCompleteItemConfiguration = AutoCompleteItemConfiguration(), cellType: T.Type) where T : BrandMessengerUI.AutoCompletionItemCell
  public func reloadAutoCompletionView()
  public func hide(_ flag: Swift.Bool)
  public func cancelAndHide()
  @objc deinit
}
extension BrandMessengerUI.AutoCompleteManager : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText _: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
}
extension BrandMessengerUI.KBMConversationViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in _: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScrollToTop(_: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension BrandMessengerUI.KBMConversationViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout _: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
extension BrandMessengerCore.KBMTopicDetail : BrandMessengerUI.KBMContextTitleDataType {
  public var titleText: Swift.String {
    get
  }
  public var subtitleText: Swift.String {
    get
  }
  public var imageURL: Foundation.URL? {
    get
  }
  public var infoLabel1Text: Swift.String? {
    get
  }
  public var infoLabel2Text: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMMyMessageCell : BrandMessengerUI.KBMMessageCell {
  @_Concurrency.MainActor(unsafe) open func setupStyle()
  @_Concurrency.MainActor(unsafe) open func update(viewModel: BrandMessengerUI.KBMMessageViewModel)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMMyMessageListTemplateCell : BrandMessengerUI.KBMListTemplateCell {
  @_Concurrency.MainActor(unsafe) override public func update(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) override public class func rowHeight(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMFriendMessageListTemplateCell : BrandMessengerUI.KBMListTemplateCell {
  @_Concurrency.MainActor(unsafe) override public func update(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) override public class func rowHeight(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMListTemplateCell : BrandMessengerUI.KBMChatBaseCell<BrandMessengerUI.KBMMessageViewModel> {
  @_Concurrency.MainActor(unsafe) public var templateSelected: ((_ text: Swift.String?, _ action: BrandMessengerUI.ListTemplate.Action) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func update(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth _: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func rowHeight(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth _: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
public struct ListTemplate : Swift.Codable {
  public let headerImgSrc: Swift.String?
  public let headerText: Swift.String?
  public let elements: [BrandMessengerUI.ListTemplate.Element]?
  public let buttons: [BrandMessengerUI.ListTemplate.Button]?
  public struct Element : Swift.Codable {
    public let imgSrc: Swift.String?
    public let title: Swift.String?
    public let description: Swift.String?
    public let action: BrandMessengerUI.ListTemplate.Action?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Button : Swift.Codable {
    public let name: Swift.String?
    public let action: BrandMessengerUI.ListTemplate.Action?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let url: Swift.String?
    public let type: Swift.String?
    public let text: Swift.String?
    public let updateLanguage: Swift.String?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMGenericCardCollectionView : BrandMessengerUI.KBMIndexedCollectionView {
  @_Concurrency.MainActor(unsafe) open var cardTemplate: [BrandMessengerUI.CardTemplate]?
  @_Concurrency.MainActor(unsafe) override open func setMessage(viewModel: BrandMessengerUI.KBMMessageViewModel)
  @_Concurrency.MainActor(unsafe) override open class func rowHeightFor(message: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMGenericCardCell : UIKit.UICollectionViewCell {
  public enum Font {
    public static var overlayText: UIKit.UIFont
    public static var rating: UIKit.UIFont
    public static var title: UIKit.UIFont
    public static var subtitle: UIKit.UIFont
    public static var description: UIKit.UIFont
    public static var button: UIKit.UIFont
  }
  public enum Config {
    public static let buttonHeight: CoreGraphics.CGFloat
    public static let imageHeight: CoreGraphics.CGFloat
    public static let spacing: CoreGraphics.CGFloat
    public static let buttonStackViewSpacing: CoreGraphics.CGFloat
    public enum OverlayText {
      public static let width: CoreGraphics.CGFloat
      public static let height: CoreGraphics.CGFloat
    }
    public static var descriptionMaxLines: Swift.Int
  }
  @_Concurrency.MainActor(unsafe) open var coverImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) open var overlayText: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var ratingLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var descriptionLabel: BrandMessengerUI.VerticalAlignLabel
  @_Concurrency.MainActor(unsafe) open var titleStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) open var buttonStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) open var buttonsBackground: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var actionButtons: [UIKit.UIButton]
  @_Concurrency.MainActor(unsafe) open var card: BrandMessengerUI.CardTemplate!
  @_Concurrency.MainActor(unsafe) open var buttonSelected: ((_ index: Swift.Int, _ name: Swift.String, _ card: BrandMessengerUI.CardTemplate) -> Swift.Void)?
  @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open class func rowHeight(card: BrandMessengerUI.CardTemplate, maxWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open func update(card: BrandMessengerUI.CardTemplate)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class VerticalAlignLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func textRect(forBounds bounds: CoreGraphics.CGRect, limitedToNumberOfLines: Swift.Int) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InsetLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in _: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMFriendGenericCardMessageCell : BrandMessengerUI.KBMGenericCardBaseCell {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) required public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override open func update(viewModel: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) open class func rowHeigh(viewModel: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMMyGenericCardMessageCell : BrandMessengerUI.KBMGenericCardBaseCell {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) required public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override open func update(viewModel: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func rowHeigh(viewModel: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMGenericCardBaseCell : BrandMessengerUI.KBMChatBaseCell<BrandMessengerUI.KBMMessageViewModel> {
  @_Concurrency.MainActor(unsafe) open var collectionView: BrandMessengerUI.KBMGenericCardCollectionView!
  @_Concurrency.MainActor(unsafe) open func update(viewModel: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public class func cardHeightFor(message: BrandMessengerUI.KBMMessageViewModel, width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open func setCollectionViewDataSourceDelegate(dataSourceDelegate delegate: UIKit.UICollectionViewDataSource & UIKit.UICollectionViewDelegate, index: ObjectiveC.NSInteger)
  @_Concurrency.MainActor(unsafe) open func setCollectionViewDataSourceDelegate(dataSourceDelegate delegate: UIKit.UICollectionViewDataSource & UIKit.UICollectionViewDelegate, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func register(cell: UIKit.UICollectionViewCell.Type)
  @objc deinit
}
public protocol KBMIdentityProtocol {
  var displayName: Swift.String { get }
  var displayPhoto: Foundation.URL? { get }
  var userID: Swift.String { get }
  var mood: Swift.String? { get }
  var emailAddress: Swift.String? { get }
}
public enum KBMMessageType : Swift.String {
  case text
  case photo
  case voice
  case location
  case information
  case video
  case html
  case quickReply
  case button
  case listTemplate
  case cardTemplate
  case email
  case document
  case contact
  case faqTemplate
  case imageMessage
  case allButtons
  case form
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol KBMMessageViewModel {
  var message: Swift.String? { get }
  var isMyMessage: Swift.Bool { get }
  var messageType: BrandMessengerUI.KBMMessageType { get }
  var identifier: Swift.String { get }
  var date: Foundation.Date { get }
  var time: Swift.String? { get }
  var avatarURL: Foundation.URL? { get }
  var displayName: Swift.String? { get }
  var contactId: Swift.String? { get }
  var channelKey: Foundation.NSNumber? { get }
  var conversationId: Foundation.NSNumber? { get }
  var isSent: Swift.Bool { get }
  var isAllReceived: Swift.Bool { get }
  var isAllRead: Swift.Bool { get }
  var ratio: CoreGraphics.CGFloat { get }
  var size: Swift.Int64 { get }
  var thumbnailURL: Foundation.URL? { get }
  var imageURL: Foundation.URL? { get }
  var filePath: Swift.String? { get set }
  var geocode: BrandMessengerUI.Geocode? { get }
  var voiceData: Foundation.Data? { get set }
  var voiceTotalDuration: CoreGraphics.CGFloat { get set }
  var voiceCurrentDuration: CoreGraphics.CGFloat { get set }
  var voiceCurrentState: BrandMessengerUI.KBMVoiceCellState { get set }
  var fileMetaInfo: BrandMessengerCore.KBMFileMetaInfo? { get }
  var receiverId: Swift.String? { get }
  var isReplyMessage: Swift.Bool { get }
  var metadata: [Swift.String : Any]? { get }
  var source: Swift.Int16 { get }
  var contentType: RichMessageKit.Message.ContentType { get }
}
@_hasMissingDesignatedInitializers public class KBMMessageModel : BrandMessengerUI.KBMMessageViewModel {
  public var contentType: RichMessageKit.Message.ContentType
  public var message: Swift.String?
  public var isMyMessage: Swift.Bool
  public var messageType: BrandMessengerUI.KBMMessageType
  public var identifier: Swift.String
  public var date: Foundation.Date
  public var time: Swift.String?
  public var avatarURL: Foundation.URL?
  public var displayName: Swift.String?
  public var contactId: Swift.String?
  public var conversationId: Foundation.NSNumber?
  public var channelKey: Foundation.NSNumber?
  public var isSent: Swift.Bool
  public var isAllReceived: Swift.Bool
  public var isAllRead: Swift.Bool
  public var ratio: CoreGraphics.CGFloat
  public var size: Swift.Int64
  public var thumbnailURL: Foundation.URL?
  public var imageURL: Foundation.URL?
  public var filePath: Swift.String?
  public var geocode: BrandMessengerUI.Geocode?
  public var voiceTotalDuration: CoreGraphics.CGFloat
  public var voiceCurrentDuration: CoreGraphics.CGFloat
  public var voiceCurrentState: BrandMessengerUI.KBMVoiceCellState
  public var voiceData: Foundation.Data?
  public var fileMetaInfo: BrandMessengerCore.KBMFileMetaInfo?
  public var receiverId: Swift.String?
  public var isReplyMessage: Swift.Bool
  public var metadata: [Swift.String : Any]?
  public var source: Swift.Int16
  @objc deinit
}
extension BrandMessengerUI.KBMMessageModel : Swift.Equatable {
  public static func == (lhs: BrandMessengerUI.KBMMessageModel, rhs: BrandMessengerUI.KBMMessageModel) -> Swift.Bool
}
extension BrandMessengerUI.KBMMessageViewModel {
  public var status: RichMessageKit.KBMMessageStatus {
    get
  }
}
extension Foundation.NSMutableAttributedString {
  public func trimCharacters(in set: Foundation.CharacterSet)
}
extension Foundation.NSAttributedString.Key {
  public static let secondaryFont: Foundation.NSAttributedString.Key
}
public enum AttachmentType : Swift.CaseIterable, Swift.Equatable {
  case contact
  case camera
  case gallery
  case video
  case location
  case document
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BrandMessengerUI.AttachmentType, b: BrandMessengerUI.AttachmentType) -> Swift.Bool
  public typealias AllCases = [BrandMessengerUI.AttachmentType]
  public static var allCases: [BrandMessengerUI.AttachmentType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KBMChatBarConfiguration {
  public enum AttachmentOptions {
    case all
    case none
    case some([BrandMessengerUI.AttachmentType])
  }
  public var disableButtonTintColor: Swift.Bool
  public var photosSelectionLimit: Swift.Int {
    get
    set
  }
  public var optionsToShow: BrandMessengerUI.KBMChatBarConfiguration.AttachmentOptions
  public enum TextView {
    public static var placeholder: RichMessageKit.Style
    public static var text: RichMessageKit.Style
  }
  public mutating func set(attachmentIcon icon: UIKit.UIImage?, for type: BrandMessengerUI.AttachmentType)
}
extension BrandMessengerUI.KBMChatBarConfiguration.AttachmentOptions : Swift.Equatable {
  public static func == (lhs: BrandMessengerUI.KBMChatBarConfiguration.AttachmentOptions, rhs: BrandMessengerUI.KBMChatBarConfiguration.AttachmentOptions) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMReplyMessageView : UIKit.UIView {
  public enum Theme {
    public static var message: RichMessageKit.Style
    public static var mention: RichMessageKit.Style
  }
  @_Concurrency.MainActor(unsafe) open var nameLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var messageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var closeButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var previewImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) open var selfNameText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var closeButtonTapped: ((Swift.Bool) -> Swift.Void)?
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func update(message: BrandMessengerUI.KBMMessageViewModel)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMFriendMessageQuickReplyCell : BrandMessengerUI.KBMChatBaseCell<BrandMessengerUI.KBMMessageViewModel> {
  @_Concurrency.MainActor(unsafe) public func update(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func rowHeight(viewModel: BrandMessengerUI.KBMMessageViewModel, maxWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
}
extension BrandMessengerUI.KBMFriendMessageQuickReplyCell : RichMessageKit.Tappable {
  @_Concurrency.MainActor(unsafe) public func didTap(index: Swift.Int?, title: Swift.String)
}
public protocol KBMConversationListViewModelDelegate : AnyObject {
  func startedLoading()
  func listUpdated()
  func rowUpdatedAt(position: Swift.Int)
}
public protocol KBMConversationListViewModelProtocol : AnyObject {
  func numberOfSections() -> Swift.Int
  func numberOfRowsInSection(_ section: Swift.Int) -> Swift.Int
  func chatFor(indexPath: Foundation.IndexPath) -> BrandMessengerUI.KBMChatViewModelProtocol?
  func getChatList() -> [Any]
  func remove(message: BrandMessengerCore.KBMMessage)
  func sendMuteRequestFor(message: BrandMessengerCore.KBMMessage, tillTime: Foundation.NSNumber, withCompletion: @escaping (Swift.Bool) -> Swift.Void)
  func sendUnmuteRequestFor(message: BrandMessengerCore.KBMMessage, withCompletion: @escaping (Swift.Bool) -> Swift.Void)
  func block(conversation: BrandMessengerCore.KBMMessage, withCompletion: @escaping (Swift.Error?, Swift.Bool) -> Swift.Void)
  func unblock(conversation: BrandMessengerCore.KBMMessage, withCompletion: @escaping (Swift.Error?, Swift.Bool) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers final public class KBMConversationListViewModel : ObjectiveC.NSObject, BrandMessengerUI.KBMConversationListViewModelProtocol {
  weak final public var delegate: BrandMessengerUI.KBMConversationListViewModelDelegate?
  @objc override dynamic public init()
  final public func prepareController(dbService: BrandMessengerCore.KBMMessageDBService)
  final public func getChatList() -> [Any]
  final public func numberOfSections() -> Swift.Int
  final public func numberOfRowsInSection(_: Swift.Int) -> Swift.Int
  final public func chatFor(indexPath: Foundation.IndexPath) -> BrandMessengerUI.KBMChatViewModelProtocol?
  final public func remove(message: BrandMessengerCore.KBMMessage)
  final public func updateTypingStatus(in viewController: BrandMessengerUI.KBMConversationViewController, userId: Swift.String, status: Swift.Bool)
  final public func updateMessageList(messages: [Any])
  final public func updateDeliveryReport(convVC: BrandMessengerUI.KBMConversationViewController?, messageKey: Swift.String?, contactId: Swift.String?, status: Swift.Int32?)
  final public func updateStatusReport(convVC: BrandMessengerUI.KBMConversationViewController?, forContact contact: Swift.String?, status: Swift.Int32?)
  final public func addMessages(messages: Any)
  final public func updateStatusFor(userDetail: BrandMessengerCore.KBMUserDetail)
  final public func syncCall(viewController: BrandMessengerUI.KBMConversationViewController?, message: BrandMessengerCore.KBMMessage, isChatOpen: Swift.Bool)
  final public func fetchMoreMessages(dbService: BrandMessengerCore.KBMMessageDBService)
  final public func sendUnmuteRequestFor(message: BrandMessengerCore.KBMMessage, withCompletion: @escaping (Swift.Bool) -> Swift.Void)
  final public func sendMuteRequestFor(message: BrandMessengerCore.KBMMessage, tillTime: Foundation.NSNumber, withCompletion: @escaping (Swift.Bool) -> Swift.Void)
  final public func block(conversation: BrandMessengerCore.KBMMessage, withCompletion: @escaping (Swift.Error?, Swift.Bool) -> Swift.Void)
  final public func unblock(conversation: BrandMessengerCore.KBMMessage, withCompletion: @escaping (Swift.Error?, Swift.Bool) -> Swift.Void)
  final public func updateUserDetail(userId: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  final public func muteNotification(conversation: BrandMessengerCore.KBMMessage, isMuted: Swift.Bool)
  final public func userBlockNotification(userId: Swift.String, isBlocked: Swift.Bool)
  final public func conversationViewModelOf(type conversationViewModelType: BrandMessengerUI.KBMConversationViewModel.Type, contactId: Swift.String?, channelId: Foundation.NSNumber?, conversationId: Foundation.NSNumber?, localizedStringFileName: Swift.String?) -> BrandMessengerUI.KBMConversationViewModel
  @objc deinit
}
extension BrandMessengerUI.KBMConversationViewController : BrandMessengerUI.KBMMessageCellDelegate {
  @_Concurrency.MainActor(unsafe) public func urlTapped(url: Foundation.URL, message _: BrandMessengerUI.KBMMessageViewModel)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMBaseCell<T> : UIKit.UITableViewCell {
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMConversationViewController : BrandMessengerUI.KBMBaseViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: BrandMessengerUI.KBMConversationViewModel! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var individualLaunch: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var chatBar: BrandMessengerUI.KBMChatBar {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var autocompleteManager: BrandMessengerUI.AutoCompleteManager {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let autocompletionView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) open var navigationBar: BrandMessengerUI.KBMConversationNavBar {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var backgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var contextTitleView: BrandMessengerUI.KBMContextTitleView
  @_Concurrency.MainActor(unsafe) open var templateView: BrandMessengerUI.KBMTemplateMessagesView?
  @_Concurrency.MainActor(unsafe) open var replyMessageView: BrandMessengerUI.KBMReplyMessageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isChatBarHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(configuration: BrandMessengerUI.KBMConfiguration, individualLaunch: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) required public init(configuration _: BrandMessengerUI.KBMConfiguration)
  @_Concurrency.MainActor(unsafe) public func viewWillLoadFromTappingOnNotification()
  @_Concurrency.MainActor(unsafe) override open func addObserver()
  @_Concurrency.MainActor(unsafe) override open func removeObserver()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func showAccountSuspensionView()
  @_Concurrency.MainActor(unsafe) open func checkUserBlock()
  @_Concurrency.MainActor(unsafe) open func isChannelLeft()
  @_Concurrency.MainActor(unsafe) public func configureChatBar()
  @_Concurrency.MainActor(unsafe) open func refreshViewController()
  @objc @_Concurrency.MainActor(unsafe) open func pushNotification(notification: Foundation.NSNotification)
  @_Concurrency.MainActor(unsafe) public func unsubscribingChannel()
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewWillBeginDecelerating(_: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) public func showTypingLabel(status: Swift.Bool, userId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func invalidateTimerAndUpdateHeightConstraint(_: Foundation.Timer?)
  @_Concurrency.MainActor(unsafe) public func sync(message: BrandMessengerCore.KBMMessage)
  @_Concurrency.MainActor(unsafe) public func updateDeliveryReport(messageKey: Swift.String?, contactId _: Swift.String?, status: Swift.Int32?)
  @_Concurrency.MainActor(unsafe) public func updateStatusReport(contactId: Swift.String?, status: Swift.Int32?)
  @_Concurrency.MainActor(unsafe) public func subscribeChannelToMqtt()
  @_Concurrency.MainActor(unsafe) open func sendQuickReply(_ text: Swift.String, metadata: [Swift.String : Any]?, languageCode _: Swift.String?)
  @objc deinit
}
extension BrandMessengerUI.KBMConversationViewController : ContactsUI.CNContactPickerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func contactPicker(_: ContactsUI.CNContactPickerViewController, didSelect contact: Contacts.CNContact)
}
extension BrandMessengerUI.KBMConversationViewController : BrandMessengerUI.KBMConversationViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func loadingStarted()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func loadingFinished(error _: Swift.Error?)
  @_Concurrency.MainActor(unsafe) public func messageUpdated()
  @_Concurrency.MainActor(unsafe) public func updateMessageAt(indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func moveTableViewToBottom(indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func newMessagesAdded()
  @_Concurrency.MainActor(unsafe) public func messageSent(at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func updateDisplay(contact: BrandMessengerCore.KBMContact?, channel: BrandMessengerCore.KBMChannel?)
  @_Concurrency.MainActor(unsafe) public func showLastMessage()
  @_Concurrency.MainActor(unsafe) public func willSendMessage()
  @_Concurrency.MainActor(unsafe) public func updateTyingStatus(status: Swift.Bool, userId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func clearAndReloadTable()
  @_Concurrency.MainActor(unsafe) public func updateConversationProfile()
}
extension BrandMessengerUI.KBMConversationViewController : BrandMessengerCore.KBMMQTTConversationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mqttDidConnected()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func syncCall(_ message: BrandMessengerCore.KBMMessage, andMessageList _: Foundation.NSMutableArray?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func delivered(_ messageKey: Swift.String, contactId: Swift.String?, withStatus status: Swift.Int32)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateStatus(forContact contactId: Swift.String, withStatus status: Swift.Int32)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateTypingStatus(_: Swift.String, userId: Swift.String, status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateLastSeen(atStatus userDetail: BrandMessengerCore.KBMUserDetail)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mqttConnectionClosed()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func reloadData(forUserBlockNotification _: Swift.String, andBlockFlag _: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateUserDetail(_ userId: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KBMChatBaseCell<T> : BrandMessengerUI.KBMBaseCell<T> {
  public enum MenuOption {
    case copy
    case reply
    case report
    public static func == (a: BrandMessengerUI.KBMChatBaseCell<T>.MenuOption, b: BrandMessengerUI.KBMChatBaseCell<T>.MenuOption) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public func setLocalizedStringFileName(_ localizedStringFileName: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender _: Any?) -> Swift.Bool
  @objc deinit
}
public struct KBMAppSettingsUserDefaults {
  public init()
  public func getAppPrimaryColor() -> UIKit.UIColor
  public func setAppPrimaryColorColor(color: UIKit.UIColor)
  public func getAppBarTintColor() -> UIKit.UIColor
  public func setSentMessageBackgroundColor(color: UIKit.UIColor)
  public func getSentMessageBackgroundColor() -> UIKit.UIColor
  public func getAttachmentIconsTintColor() -> UIKit.UIColor
  public func setAttachmentIconsTintColor(color: UIKit.UIColor)
  public func setReceivedMessageBackgroundColor(color: UIKit.UIColor)
  public func getReceivedMessageBackgroundColor() -> UIKit.UIColor
  public func setButtonPrimaryColor(color: UIKit.UIColor)
  public func getButtonPrimaryColor() -> UIKit.UIColor
  public func setAppSettings(appSettings: BrandMessengerUI.KBMAppSettings)
  public func updateOrSetAppSettings(appSettings: BrandMessengerUI.KBMAppSettings)
  public func getAppSettings() -> BrandMessengerUI.KBMAppSettings?
  public func clear()
}
@objc public class KBMAppSettings : ObjectiveC.NSObject, Foundation.NSCoding {
  public var showPoweredBy: Swift.Bool
  public var secondaryColor: Swift.String?
  public var sentMessageBackgroundColor: Swift.String?
  public var receivedMessageBackgroundColor: Swift.String?
  public var attachmentIconsTintColor: Swift.String?
  public var buttonPrimaryColor: Swift.String?
  public var hidePostCTAEnabled: Swift.Bool
  public init(primaryColor: Swift.String)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.String {
  public func indexOfCharacter(char: Swift.Character) -> Swift.Int?
}
public struct KBMGenericCardTemplate {
  public var cards: [BrandMessengerUI.KBMGenericCard]
}
public struct KBMGenericCard : Swift.Codable {
  public let title: Swift.String
  public let subtitle: Swift.String
  public let imageUrl: Foundation.URL?
  public let overlayText: Swift.String?
  public let description: Swift.String
  public let rating: Swift.Int?
  public struct Button : Swift.Codable {
    public let data: Swift.String
    public let name: Swift.String
    public let action: Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public let buttons: [BrandMessengerUI.KBMGenericCard.Button]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class BrandMessengerManager : ObjectiveC.NSObject {
  @objc public init(companyKey: Foundation.NSString, applicationKey: Foundation.NSString)
  @objc public static func updateToken()
  @objc public static func isUserPresent() -> Swift.Bool
  @objc public static func logoutUser(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func launchChatList(from viewController: UIKit.UIViewController)
  @objc public static func launchChatWith(contactId: Swift.String, from viewController: UIKit.UIViewController, prefilledMessage: Swift.String? = nil)
  @objc public static func launchGroupWith(clientGroupId: Swift.String, from viewController: UIKit.UIViewController, prefilledMessage: Swift.String? = nil)
  @objc public static func launchChatWith(conversationProxy: BrandMessengerCore.KBMConversationProxy, from viewController: UIKit.UIViewController)
  @objc public static func launchGroupOfTwo(with userId: Swift.String, metadata: Foundation.NSMutableDictionary, topic: Swift.String, from viewController: UIKit.UIViewController)
  @objc public static func getLoggedInUserInfo() -> BrandMessengerCore.KBMUser
  @objc public static func application(_: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @objc public static func application(_: UIKit.UIApplication, didFinishLaunchingWithOptions _: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  @objc public static func applicationWillEnterForeground(_: UIKit.UIApplication)
  @objc public static func applicationWillTerminate(_ application: UIKit.UIApplication)
  @objc public static func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @objc public static func userNotificationCenter(_: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public static func userNotificationCenter(_: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc public static func registerForNotification()
  public static func setDefaultConfiguration(_ config: BrandMessengerUI.KBMConfiguration)
  @objc public static func syncAndGetUnreadMessageCount(complete: @escaping (_ count: Swift.UInt, _ error: Foundation.NSError?) -> Swift.Void)
  @objc public class func login(_ accessToken: Swift.String, completion: @escaping (_ response: BrandMessengerCore.KBMRegistrationResponse?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc public class func show(_ viewController: UIKit.UIViewController? = nil)
  @objc public class func getDefaultAgentId() -> Swift.String
  @objc public class func setAuthenticationDelegate(_ del: BrandMessengerCore.KBMAuthenticationDelegate)
  @objc public class func isAuthenticated(completion: @escaping (_ response: Swift.Bool) -> Swift.Void)
  @objc public class func setRegion(_ region: Swift.String)
  @objc public class func useDebugUser(_ use: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMTemplateMessageCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) open var textLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let leftPadding: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func update(text: Swift.String)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hexString: Swift.String, alpha: CoreGraphics.CGFloat = 1.0)
  public static func hex8(_ netHex: Swift.Int64) -> UIKit.UIColor
  public static func mainRed() -> UIKit.UIColor
  public static func borderGray() -> UIKit.UIColor
  public static func lineBreakerProfile() -> UIKit.UIColor
  public static func circleChartStartPointRed() -> UIKit.UIColor
  public static func circleChartGray() -> UIKit.UIColor
  public static func circleChartPurple() -> UIKit.UIColor
  public static func circleChartTextColor() -> UIKit.UIColor
  public static func placeholderGray() -> UIKit.UIColor
  public static func disabledButton() -> UIKit.UIColor
  public static func onlineGreen() -> UIKit.UIColor
  public static func navigationOceanBlue() -> UIKit.UIColor
  public static func navigationTextOceanBlue() -> UIKit.UIColor
  public static func actionButtonColor() -> UIKit.UIColor
  public func toHexString() -> Swift.String
}
extension BrandMessengerUI.AutoCompleteManager : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in _: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, numberOfRowsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DefaultAutoCompleteCell : UIKit.UITableViewCell, BrandMessengerUI.AutoCompletionItemCell {
  @_Concurrency.MainActor(unsafe) public func updateView(item: BrandMessengerUI.AutoCompleteItem)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class ConversationListTableViewDataSource : ObjectiveC.NSObject, UIKit.UITableViewDataSource {
  public typealias CellConfigurator = (BrandMessengerUI.KBMChatViewModelProtocol, UIKit.UITableViewCell) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public var cellConfigurator: BrandMessengerUI.ConversationListTableViewDataSource.CellConfigurator
  @_Concurrency.MainActor(unsafe) public init(viewModel: BrandMessengerUI.KBMConversationListViewModelProtocol, cellConfigurator: @escaping BrandMessengerUI.ConversationListTableViewDataSource.CellConfigurator)
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in _: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
public protocol KBMConversationListTableViewDelegate : AnyObject {
  func tapped(_ chat: BrandMessengerUI.KBMChatViewModelProtocol, at index: Swift.Int)
  func emptyChatCellTapped()
  func scrolledToBottom()
  func muteNotification(conversation: BrandMessengerCore.KBMMessage, isMuted: Swift.Bool)
  func userBlockNotification(userId: Swift.String, isBlocked: Swift.Bool)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KBMConversationListTableViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: BrandMessengerUI.KBMConversationListViewModelProtocol
  @_Concurrency.MainActor(unsafe) public var dbService: BrandMessengerCore.KBMMessageDBService!
  @_Concurrency.MainActor(unsafe) public var hideNoConversationView: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var dataSource: BrandMessengerUI.ConversationListTableViewDataSource {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: BrandMessengerUI.KBMConversationListTableViewDelegate?
  @_Concurrency.MainActor(unsafe) public init(viewModel: BrandMessengerUI.KBMConversationListViewModelProtocol, dbService: BrandMessengerCore.KBMMessageDBService, configuration: BrandMessengerUI.KBMConfiguration, showSearch: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func replaceViewModel(_ viewModel: BrandMessengerUI.KBMConversationListViewModelProtocol)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_: UIKit.UITableView, canEditRowAt _: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_: UIKit.UITableView, viewForHeaderInSection _: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_: UIKit.UITableView, heightForHeaderInSection _: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_: UIKit.UITableView, viewForFooterInSection _: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_: UIKit.UITableView, heightForFooterInSection _: Swift.Int) -> CoreGraphics.CGFloat
  @objc deinit
}
extension BrandMessengerUI.KBMConversationListTableViewController : UIKit.UISearchResultsUpdating, UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarCancelButtonClicked(_: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_: UIKit.UISearchBar)
}
extension BrandMessengerUI.KBMConversationListTableViewController {
  @_Concurrency.MainActor(unsafe) public func chatCellAction(indexPath: Foundation.IndexPath, action: BrandMessengerUI.KBMChatCellAction, viewModel _: BrandMessengerUI.KBMChatViewModelProtocol)
}
extension BrandMessengerUI.KBMConversationListTableViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension BrandMessengerUI.KBMConversationListTableViewController : SwipeCellKit.SwipeTableViewCellDelegate {
  @_Concurrency.MainActor(unsafe) public func tableView(_: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath, for orientation: SwipeCellKit.SwipeActionsOrientation) -> [SwipeCellKit.SwipeAction]?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMIndexedCollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) open var indexPath: Foundation.IndexPath!
  @_Concurrency.MainActor(unsafe) open var viewModel: BrandMessengerUI.KBMMessageViewModel?
  @_Concurrency.MainActor(unsafe) @objc override required dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open class func rowHeightFor(message _: BrandMessengerUI.KBMMessageViewModel, width _: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open func setMessage(viewModel: BrandMessengerUI.KBMMessageViewModel)
  @objc deinit
}
@objc public enum KDCircularProgressGlowMode : Swift.Int {
  case forward, reverse, constant, noGlow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @objcMembers @_Concurrency.MainActor(unsafe) public class KDCircularProgress : UIKit.UIView, QuartzCore.CAAnimationDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var progress: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var angle: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var startAngle: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var clockwise: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var roundedCorners: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var lerpColorMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientRotateSpeed: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var glowAmount: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var glowMode: BrandMessengerUI.KDCircularProgressGlowMode {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var progressThickness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var trackThickness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var trackColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var progressInsideFillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var progressColors: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreGraphics.CGRect, colors: UIKit.UIColor...)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func set(colors: UIKit.UIColor...)
  @objc @_Concurrency.MainActor(unsafe) public func animate(fromAngle: Swift.Double, toAngle: Swift.Double, duration: Foundation.TimeInterval, relativeDuration: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) public func animate(toAngle: Swift.Double, duration: Foundation.TimeInterval, relativeDuration: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) public func pauseAnimation()
  @objc @_Concurrency.MainActor(unsafe) public func stopAnimation()
  @objc @_Concurrency.MainActor(unsafe) public func isAnimating() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc override dynamic public func prepareForInterfaceBuilder()
  @objc deinit
}
public struct KBMConfiguration {
  public var isTapOnNavigationBarEnabled: Swift.Bool
  public var isProfileTapActionEnabled: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var hideNavigationBarBottomLine: Swift.Bool
  public var chatBarAttachmentViewBackgroundColor: UIKit.UIColor
  public var hideAudioOptionInChatBar: Swift.Bool
  public var hideStartChatButton: Swift.Bool
  public var localizedStringFileName: Swift.String
  public var sendMessageIcon: UIKit.UIImage?
  @available(*, deprecated, message: "Use navigationItemsForConversationView instead")
  public var rightNavBarImageForConversationView: UIKit.UIImage?
  public var rightNavBarSystemIconForConversationView: UIKit.UIBarButtonItem.SystemItem
  public var hideRightNavBarButtonForConversationView: Swift.Bool
  public var hideBackButtonInConversationList: Swift.Bool
  public var hideLineImageFromChatBar: Swift.Bool
  public var showNameWhenUserTypesInGroup: Swift.Bool
  public var hideEmptyStateStartNewButtonInConversationList: Swift.Bool
  public var messageMetadata: [Swift.AnyHashable : Any]?
  public var statusBarStyle: UIKit.UIStatusBarStyle {
    get
    set
  }
  public var disableRichMessageButtonAction: Swift.Bool
  public var restrictedWordsFileName: Swift.String
  public var restrictedMessageRegexPattern: Swift.String
  public var showInfoOptionInGroupDetail: Swift.Bool
  public var disableSwipeInChatCell: Swift.Bool
  public var chatBar: BrandMessengerUI.KBMChatBarConfiguration
  public var navigationItemsForConversationList: [BrandMessengerUI.KBMNavigationItem] {
    get
    set
  }
  public var navigationItemsForConversationView: [BrandMessengerUI.KBMNavigationItem] {
    get
    set
  }
  public var isRefreshButtonEnabled: Swift.Bool
  public var isMemberMentionEnabled: Swift.Bool
  public var isMessageSearchEnabled: Swift.Bool
  public var isInAppNotificationBannerDisabled: Swift.Bool
  public var isLinkPreviewDisabled: Swift.Bool
  public var isNewSystemPhotosUIEnabled: Swift.Bool
  public var messageMenuOptions: [BrandMessengerUI.KBMChatBaseCell<BrandMessengerUI.KBMMessageViewModel>.MenuOption]
  @available(*, deprecated, message: "Use .chatBar.optionsToShow instead")
  public var hideContactInChatBar: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "Use .chatBar.optionsToShow instead")
  public var hideAllOptionsInChatBar: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "Use navigationItemsForConversationList instead")
  public var rightNavBarImageForConversationListView: UIKit.UIImage?
  @available(*, deprecated, message: "Use navigationItemsForConversationList instead")
  public var handleNavIconClickOnConversationListView: Swift.Bool
  @available(*, deprecated, message: "Use navigationItemsForConversationList instead it has identifier in KBMNavigationItem")
  public var nsNotificationNameForNavIconClick: Swift.String
  public var disableAddParticipantButton: Swift.Bool
  public var channelDetail: BrandMessengerUI.KBMChannelDetailViewConfiguration
  @available(*, deprecated, message: "Use KBMMessageStyle for customization.")
  public var conversationViewCustomCellBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, message: "Use KBMMessageStyle for customization.")
  public var conversationViewCustomCellTextColor: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, message: "Use messageMenuOptions to show/hide different menu options.")
  public var isReportMessageEnabled: Swift.Bool {
    get
    set
  }
  public init()
}
@objc public protocol NavigationBarCallbacks {
  @objc func titleTapped()
}
@objc @_Concurrency.MainActor(unsafe) open class KBMConversationNavBar : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var disableTitleAction: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var localizedStringFileName: Swift.String
  @_Concurrency.MainActor(unsafe) required public init(configuration: BrandMessengerUI.KBMConfiguration, delegate: BrandMessengerUI.NavigationBarCallbacks)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setupAppearance(_ appearance: UIKit.UINavigationBar)
  @objc deinit
}
final public class Geocode : Swift.CustomStringConvertible {
  required public init(coordinates: CoreLocation.CLLocationCoordinate2D)
  final public var description: Swift.String {
    get
  }
  @objc deinit
}
public protocol KBMContextTitleDataType {
  var titleText: Swift.String { get }
  var subtitleText: Swift.String { get }
  var imageURL: Foundation.URL? { get }
  var infoLabel1Text: Swift.String? { get }
  var infoLabel2Text: Swift.String? { get }
}
public protocol KBMContextTitleViewModelType {
  var contextViewData: BrandMessengerUI.KBMContextTitleDataType { get set }
  var getTitleImageURL: Foundation.URL? { get }
  var getTitleText: Swift.String? { get }
  var getSubtitleText: Swift.String? { get }
  var getFirstKeyValuePairText: Swift.String? { get }
  var getSecondKeyValuePairText: Swift.String? { get }
}
open class KBMContextTitleViewModel : BrandMessengerUI.KBMContextTitleViewModelType {
  public var contextViewData: BrandMessengerUI.KBMContextTitleDataType
  public var getTitleImageURL: Foundation.URL? {
    get
  }
  public var getTitleText: Swift.String? {
    get
  }
  public var getSubtitleText: Swift.String? {
    get
  }
  public var getFirstKeyValuePairText: Swift.String? {
    get
  }
  public var getSecondKeyValuePairText: Swift.String? {
    get
  }
  public init(data: BrandMessengerUI.KBMContextTitleDataType)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class KBMTemplateMessagesView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var viewModel: BrandMessengerUI.KBMTemplateMessagesViewModel!
  @_Concurrency.MainActor(unsafe) open var collectionView: UIKit.UICollectionView
  @_Concurrency.MainActor(unsafe) open var messageSelected: ((BrandMessengerUI.KBMTemplateMessageModel) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, viewModel: BrandMessengerUI.KBMTemplateMessagesViewModel)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
extension BrandMessengerUI.KBMTemplateMessagesView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in _: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_: UIKit.UICollectionView, layout _: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
public struct KBMChannelDetailViewConfiguration {
  public var button: RichMessageKit.Style
  public var participantHeaderTitle: RichMessageKit.Style
  public var groupNameBorderColor: UIKit.UIColor
  public var editLabel: RichMessageKit.Style
  public var defaultGroupIcon: UIKit.UIImage?
  public var addMemberIcon: UIKit.UIImage?
  public var memberName: RichMessageKit.Style
  public var groupName: RichMessageKit.Style
  public var disableGroupDescriptionEdit: Swift.Bool
  public init()
}
@_hasMissingDesignatedInitializers public class KBMPushNotificationHandler {
  public static let shared: BrandMessengerUI.KBMPushNotificationHandler
  public func dataConnectionNotificationHandlerWith(_ configuration: BrandMessengerUI.KBMConfiguration)
  @objc deinit
}
extension BrandMessengerUI.KBMConversationViewController : BrandMessengerUI.AutoCompletionDelegate {
  @_Concurrency.MainActor(unsafe) public func didMatch(prefix: Swift.String, message: Swift.String)
}
public struct CardTemplate : Swift.Codable {
  public let title: Swift.String?
  public let titleExt: Swift.String?
  public let subtitle: Swift.String?
  public let description: Swift.String?
  public let header: BrandMessengerUI.CardTemplate.Header?
  public let buttons: [BrandMessengerUI.CardTemplate.Button]?
  public struct Header : Swift.Codable {
    public let imgSrc: Swift.String?
    public let overlayText: Swift.String?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Button : Swift.Codable {
    public let name: Swift.String
    public let action: BrandMessengerUI.CardTemplate.Action?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let type: Swift.String
    public let payload: BrandMessengerUI.CardTemplate.Payload?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Payload : Swift.Codable {
    public let url: Swift.String?
    public let title: Swift.String?
    public let message: Swift.String?
    public let text: Swift.String?
    public let updateLanguage: Swift.String?
    public let formAction: Swift.String?
    public let requestType: Swift.String?
    public let formData: BrandMessengerUI.CardTemplate.FormData?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct FormData : Swift.Codable {
    public let amount: Swift.String?
    public let description: Swift.String?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Util {
  public func cardTemplate(from genericCard: BrandMessengerUI.KBMGenericCard) -> BrandMessengerUI.CardTemplate
  @objc deinit
}
public protocol KBMContextTitleViewType {
  func configureWith(value: BrandMessengerUI.KBMContextTitleDataType)
  func setupUI()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KBMContextTitleView : UIKit.UIView, BrandMessengerUI.KBMContextTitleViewType {
  @_Concurrency.MainActor(unsafe) final public let contextImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let topRightInfoLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let bottomRightInfoLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func configureWith(value data: BrandMessengerUI.KBMContextTitleDataType)
  @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc deinit
}
public enum KBMMessageStyle {
  public static var displayName: RichMessageKit.Style
  public static var playTime: RichMessageKit.Style
  public static var time: RichMessageKit.Style
  public static var receivedMessage: RichMessageKit.Style
  public static var sentMessage: RichMessageKit.Style
  public static var sentMention: RichMessageKit.Style
  public static var receivedMention: RichMessageKit.Style
  public static var infoMessage: RichMessageKit.Style
  public static var dateSeparator: RichMessageKit.Style
  @available(*, deprecated, message: "Use `receivedMessage` and `sentMessage`")
  public static var message: RichMessageKit.Style {
    get
    set
  }
  public enum BubbleStyle {
    case edge
    case round
    public static func == (a: BrandMessengerUI.KBMMessageStyle.BubbleStyle, b: BrandMessengerUI.KBMMessageStyle.BubbleStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Bubble {
    public struct Border {
      public var color: UIKit.UIColor
      public var width: CoreGraphics.CGFloat
    }
    public var color: UIKit.UIColor
    public var cornerRadius: CoreGraphics.CGFloat
    public var style: BrandMessengerUI.KBMMessageStyle.BubbleStyle
    public var border: BrandMessengerUI.KBMMessageStyle.Bubble.Border
    public let widthPadding: CoreGraphics.CGFloat
    public init(color: UIKit.UIColor, style: BrandMessengerUI.KBMMessageStyle.BubbleStyle)
  }
  public static var sentBubble: BrandMessengerUI.KBMMessageStyle.Bubble {
    get
    set
  }
  public static var receivedBubble: BrandMessengerUI.KBMMessageStyle.Bubble {
    get
    set
  }
  public static var messageStatus: BrandMessengerUI.KBMMessageStyle.SentMessageStatus
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CustomSearchBar : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let searchBar: UIKit.UISearchBar
  @_Concurrency.MainActor(unsafe) public init(searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func show(_ show: Swift.Bool)
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
public enum ActionableMessageType : Swift.String {
  case quickReply
  case button
  case listTemplate
  case cardTemplate
  case genericList
  case genericCard
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum KBMRichMessageStyle {
  public static var primaryColor: UIKit.UIColor {
    get
    set
  }
}
extension BrandMessengerUI.KBMListTemplateCell {
  public struct ListStyle : RichMessageKit.ColorProtocol {
    public static func setPrimaryColor(primaryColor: UIKit.UIColor)
  }
}
extension BrandMessengerUI.KBMGenericCardCell {
  public struct CardStyle : RichMessageKit.ColorProtocol {
    public static func setPrimaryColor(primaryColor: UIKit.UIColor)
    public mutating func setColor(primaryColor: UIKit.UIColor)
  }
}
public class NotificationHelper {
  public struct NotificationData {
    public let userId: Swift.String?
    public let groupId: Foundation.NSNumber?
    public let conversationId: Foundation.NSNumber?
    public var isBlocked: Swift.Bool
    public var isMute: Swift.Bool
    public init(userId: Swift.String?, groupId: Foundation.NSNumber?, conversationId: Foundation.NSNumber?)
  }
  public init()
  public func notificationInfo(_ notification: Foundation.Notification) -> (BrandMessengerUI.NotificationHelper.NotificationData?, Swift.String?)
  public func isNotificationForActiveThread(_ notification: BrandMessengerUI.NotificationHelper.NotificationData) -> Swift.Bool
  public func openConversationFromListVC(_ viewController: BrandMessengerUI.KBMConversationListViewController, notification: BrandMessengerUI.NotificationHelper.NotificationData)
  public func getConversationVCToLaunch(notification: BrandMessengerUI.NotificationHelper.NotificationData, configuration: BrandMessengerUI.KBMConfiguration) -> BrandMessengerUI.KBMConversationListViewController
  public func refreshConversation(_ viewController: BrandMessengerUI.KBMConversationViewController, with notification: BrandMessengerUI.NotificationHelper.NotificationData)
  public func isBrandMessengerVCAtTop() -> Swift.Bool
  public func handleNotificationTap(_ notification: BrandMessengerUI.NotificationHelper.NotificationData)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class TranslucentView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var translucent: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var translucentAlpha: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var translucentStyle: UIKit.UIBarStyle {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var translucentTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension BrandMessengerUI.TranslucentView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var backgroundColor: UIKit.UIColor! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var subviews: [UIKit.UIView] {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sendSubviewToBack(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func insertSubview(_ view: UIKit.UIView, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func exchangeSubview(at index1: Swift.Int, withSubviewAt index2: Swift.Int)
}
public class DownloadTask {
  public var completed: Swift.Bool
  public var fileName: Swift.String?
  public var contentType: Swift.String?
  public var downloadError: Swift.Error?
  public var identifier: Swift.String?
  public var filePath: Swift.String?
  public init(downloadUrl url: Swift.String, fileName: Swift.String?)
  @objc deinit
}
public protocol KBMChatViewModelProtocol {
  var avatar: Foundation.URL? { get }
  var avatarImage: UIKit.UIImage? { get }
  var avatarGroupImageUrl: Swift.String? { get }
  var name: Swift.String { get }
  var groupName: Swift.String { get }
  var theLastMessage: Swift.String? { get }
  var hasUnreadMessages: Swift.Bool { get }
  var totalNumberOfUnreadMessages: Swift.UInt { get }
  var isGroupChat: Swift.Bool { get }
  var contactId: Swift.String? { get }
  var channelKey: Foundation.NSNumber? { get }
  var conversationId: Foundation.NSNumber? { get set }
  var createdAt: Swift.String? { get }
  var messageType: BrandMessengerUI.KBMMessageType { get }
  var channelType: Swift.Int16 { get }
  var isMessageEmpty: Swift.Bool { get }
  var messageMetadata: Foundation.NSMutableDictionary? { get }
}
public enum KBMChatCellAction {
  case delete
  case favorite
  case store
  case mute
  case unmute
  case block
  case unblock
  public static func == (a: BrandMessengerUI.KBMChatCellAction, b: BrandMessengerUI.KBMChatCellAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class KBMChatCell : SwipeCellKit.SwipeTableViewCell {
  public enum Config {
    public static var iconMuted: UIKit.UIImage?
  }
  @_Concurrency.MainActor(unsafe) final public var localizationFileName: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override final public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func update(viewModel: BrandMessengerUI.KBMChatViewModelProtocol, identity _: BrandMessengerUI.KBMIdentityProtocol?, placeholder: UIKit.UIImage? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KBMBaseNavigationViewController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension BrandMessengerUI.KBMVoiceCellState : Swift.Equatable {}
extension BrandMessengerUI.KBMVoiceCellState : Swift.Hashable {}
extension BrandMessengerUI.AudioRecordButton.KBMSoundRecorderState : Swift.Equatable {}
extension BrandMessengerUI.AudioRecordButton.KBMSoundRecorderState : Swift.Hashable {}
extension BrandMessengerUI.Color.Text : Swift.Equatable {}
extension BrandMessengerUI.Color.Text : Swift.Hashable {}
extension BrandMessengerUI.Color.Text : Swift.RawRepresentable {}
extension BrandMessengerUI.Color.Background : Swift.Equatable {}
extension BrandMessengerUI.Color.Background : Swift.Hashable {}
extension BrandMessengerUI.Color.Background : Swift.RawRepresentable {}
extension BrandMessengerUI.Color.Border : Swift.Equatable {}
extension BrandMessengerUI.Color.Border : Swift.Hashable {}
extension BrandMessengerUI.Color.Border : Swift.RawRepresentable {}
extension BrandMessengerUI.KBMChatBar.ButtonMode : Swift.Equatable {}
extension BrandMessengerUI.KBMChatBar.ButtonMode : Swift.Hashable {}
extension BrandMessengerUI.KBMMessageType : Swift.Equatable {}
extension BrandMessengerUI.KBMMessageType : Swift.Hashable {}
extension BrandMessengerUI.KBMMessageType : Swift.RawRepresentable {}
extension BrandMessengerUI.AttachmentType : Swift.Hashable {}
extension BrandMessengerUI.KBMChatBaseCell.MenuOption : Swift.Equatable {}
extension BrandMessengerUI.KBMChatBaseCell.MenuOption : Swift.Hashable {}
extension BrandMessengerUI.KDCircularProgressGlowMode : Swift.Equatable {}
extension BrandMessengerUI.KDCircularProgressGlowMode : Swift.Hashable {}
extension BrandMessengerUI.KDCircularProgressGlowMode : Swift.RawRepresentable {}
extension BrandMessengerUI.KBMMessageStyle.BubbleStyle : Swift.Equatable {}
extension BrandMessengerUI.KBMMessageStyle.BubbleStyle : Swift.Hashable {}
extension BrandMessengerUI.ActionableMessageType : Swift.Equatable {}
extension BrandMessengerUI.ActionableMessageType : Swift.Hashable {}
extension BrandMessengerUI.ActionableMessageType : Swift.RawRepresentable {}
extension BrandMessengerUI.KBMChatCellAction : Swift.Equatable {}
extension BrandMessengerUI.KBMChatCellAction : Swift.Hashable {}
